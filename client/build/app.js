!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/build/",n(n.s=4)}([function(t,e,n){var i,o,r;
/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */
/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */
o="undefined"!=typeof window?window:this,r=function(n,o){var r=[],a=n.document,s=r.slice,l=r.concat,u=r.push,c=r.indexOf,f={},d=f.toString,p=f.hasOwnProperty,h={},g=function(t,e){return new g.fn.init(t,e)},m=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,v=/^-ms-/,b=/-([\da-z])/gi,y=function(t,e){return e.toUpperCase()};function x(t){var e=!!t&&"length"in t&&t.length,n=g.type(t);return"function"!==n&&!g.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}g.fn=g.prototype={jquery:"2.2.4",constructor:g,selector:"",length:0,toArray:function(){return s.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:s.call(this)},pushStack:function(t){var e=g.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return g.each(this,t)},map:function(t){return this.pushStack(g.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:r.sort,splice:r.splice},g.extend=g.fn.extend=function(){var t,e,n,i,o,r,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||g.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)n=a[e],a!==(i=t[e])&&(u&&i&&(g.isPlainObject(i)||(o=g.isArray(i)))?(o?(o=!1,r=n&&g.isArray(n)?n:[]):r=n&&g.isPlainObject(n)?n:{},a[e]=g.extend(u,r,i)):void 0!==i&&(a[e]=i));return a},g.extend({expando:"jQuery"+("2.2.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===g.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!g.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){var e;if("object"!==g.type(t)||t.nodeType||g.isWindow(t))return!1;if(t.constructor&&!p.call(t,"constructor")&&!p.call(t.constructor.prototype||{},"isPrototypeOf"))return!1;for(e in t);return void 0===e||p.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?f[d.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;(t=g.trim(t))&&(1===t.indexOf("use strict")?((e=a.createElement("script")).text=t,a.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(v,"ms-").replace(b,y)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var n,i=0;if(x(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(m,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(x(Object(t))?g.merge(n,"string"==typeof t?[t]:t):u.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:c.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,a=!n;o<r;o++)!e(t[o],o)!==a&&i.push(t[o]);return i},map:function(t,e,n){var i,o,r=0,a=[];if(x(t))for(i=t.length;r<i;r++)null!=(o=e(t[r],r,n))&&a.push(o);else for(r in t)null!=(o=e(t[r],r,n))&&a.push(o);return l.apply([],a)},guid:1,proxy:function(t,e){var n,i,o;if("string"==typeof e&&(n=t[e],e=t,t=n),g.isFunction(t))return i=s.call(arguments,2),(o=function(){return t.apply(e||this,i.concat(s.call(arguments)))}).guid=t.guid=t.guid||g.guid++,o},now:Date.now,support:h}),"function"==typeof Symbol&&(g.fn[Symbol.iterator]=r[Symbol.iterator]),g.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){f["[object "+e+"]"]=e.toLowerCase()});var w=
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
function(t){var e,n,i,o,r,a,s,l,u,c,f,d,p,h,g,m,v,b,y,x="sizzle"+1*new Date,w=t.document,T=0,C=0,E=rt(),k=rt(),S=rt(),N=function(t,e){return t===e&&(f=!0),0},D=1<<31,$={}.hasOwnProperty,A=[],O=A.pop,j=A.push,I=A.push,L=A.slice,R=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},_="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",P="\\["+F+"*("+H+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+F+"*\\]",M=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",B=new RegExp(F+"+","g"),q=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),W=new RegExp("^"+F+"*,"+F+"*"),U=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),V=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),z=new RegExp(M),J=new RegExp("^"+H+"$"),X={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+M),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+_+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,tt=/'|\\/g,et=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),nt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},it=function(){d()};try{I.apply(A=L.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(t){I={apply:A.length?function(t,e){j.apply(t,L.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function ot(t,e,i,o){var r,s,u,c,f,h,v,b,T=e&&e.ownerDocument,C=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==C&&9!==C&&11!==C)return i;if(!o&&((e?e.ownerDocument||e:w)!==p&&d(e),e=e||p,g)){if(11!==C&&(h=Z.exec(t)))if(r=h[1]){if(9===C){if(!(u=e.getElementById(r)))return i;if(u.id===r)return i.push(u),i}else if(T&&(u=T.getElementById(r))&&y(e,u)&&u.id===r)return i.push(u),i}else{if(h[2])return I.apply(i,e.getElementsByTagName(t)),i;if((r=h[3])&&n.getElementsByClassName&&e.getElementsByClassName)return I.apply(i,e.getElementsByClassName(r)),i}if(n.qsa&&!S[t+" "]&&(!m||!m.test(t))){if(1!==C)T=e,b=t;else if("object"!==e.nodeName.toLowerCase()){for((c=e.getAttribute("id"))?c=c.replace(tt,"\\$&"):e.setAttribute("id",c=x),s=(v=a(t)).length,f=J.test(c)?"#"+c:"[id='"+c+"']";s--;)v[s]=f+" "+gt(v[s]);b=v.join(","),T=Q.test(t)&&pt(e.parentNode)||e}if(b)try{return I.apply(i,T.querySelectorAll(b)),i}catch(t){}finally{c===x&&e.removeAttribute("id")}}}return l(t.replace(q,"$1"),e,i,o)}function rt(){var t=[];return function e(n,o){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=o}}function at(t){return t[x]=!0,t}function st(t){var e=p.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function lt(t,e){for(var n=t.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=e}function ut(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||D)-(~t.sourceIndex||D);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ct(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function dt(t){return at(function(e){return e=+e,at(function(n,i){for(var o,r=t([],n.length,e),a=r.length;a--;)n[o=r[a]]&&(n[o]=!(i[o]=n[o]))})})}function pt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=ot.support={},r=ot.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},d=ot.setDocument=function(t){var e,o,a=t?t.ownerDocument||t:w;return a!==p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,g=!r(p),(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",it,!1):o.attachEvent&&o.attachEvent("onunload",it)),n.attributes=st(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=st(function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(p.getElementsByClassName),n.getById=st(function(t){return h.appendChild(t).id=x,!p.getElementsByName||!p.getElementsByName(x).length}),n.getById?(i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}},i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}}):(delete i.find.ID,i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=K.test(p.querySelectorAll))&&(st(function(t){h.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+F+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+F+"*(?:value|"+_+")"),t.querySelectorAll("[id~="+x+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")}),st(function(t){var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+F+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=K.test(b=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&st(function(t){n.disconnectedMatch=b.call(t,"div"),b.call(t,"[s!='']:x"),v.push("!=",M)}),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=K.test(h.compareDocumentPosition),y=e||K.test(h.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},N=e?function(t,e){if(t===e)return f=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t===p||t.ownerDocument===w&&y(w,t)?-1:e===p||e.ownerDocument===w&&y(w,e)?1:c?R(c,t)-R(c,e):0:4&i?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,a=[t],s=[e];if(!o||!r)return t===p?-1:e===p?1:o?-1:r?1:c?R(c,t)-R(c,e):0;if(o===r)return ut(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?ut(a[i],s[i]):a[i]===w?-1:s[i]===w?1:0},p):p},ot.matches=function(t,e){return ot(t,null,null,e)},ot.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&d(t),e=e.replace(V,"='$1']"),n.matchesSelector&&g&&!S[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var i=b.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return ot(e,p,null,[t]).length>0},ot.contains=function(t,e){return(t.ownerDocument||t)!==p&&d(t),y(t,e)},ot.attr=function(t,e){(t.ownerDocument||t)!==p&&d(t);var o=i.attrHandle[e.toLowerCase()],r=o&&$.call(i.attrHandle,e.toLowerCase())?o(t,e,!g):void 0;return void 0!==r?r:n.attributes||!g?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},ot.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ot.uniqueSort=function(t){var e,i=[],o=0,r=0;if(f=!n.detectDuplicates,c=!n.sortStable&&t.slice(0),t.sort(N),f){for(;e=t[r++];)e===t[r]&&(o=i.push(r));for(;o--;)t.splice(i[o],1)}return c=null,t},o=ot.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=o(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=o(e);return n},(i=ot.selectors={cacheLength:50,createPseudo:at,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ot.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ot.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&z.test(n)&&(e=a(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=E[t+" "];return e||(e=new RegExp("(^|"+F+")"+t+"("+F+"|$)"))&&E(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(i){var o=ot.attr(i,t);return null==o?"!="===e:!e||(o+="","="===e?o===n:"!="===e?o!==n:"^="===e?n&&0===o.indexOf(n):"*="===e?n&&o.indexOf(n)>-1:"$="===e?n&&o.slice(-n.length)===n:"~="===e?(" "+o.replace(B," ")+" ").indexOf(n)>-1:"|="===e&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var u,c,f,d,p,h,g=r!==a?"nextSibling":"previousSibling",m=e.parentNode,v=s&&e.nodeName.toLowerCase(),b=!l&&!s,y=!1;if(m){if(r){for(;g;){for(d=e;d=d[g];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=g="only"===t&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&b){for(y=(p=(u=(c=(f=(d=m)[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[t]||[])[0]===T&&u[1])&&u[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(y=p=0)||h.pop();)if(1===d.nodeType&&++y&&d===e){c[t]=[T,p,y];break}}else if(b&&(y=p=(u=(c=(f=(d=e)[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[t]||[])[0]===T&&u[1]),!1===y)for(;(d=++p&&d&&d[g]||(y=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++y||(b&&((c=(f=d[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[t]=[T,y]),d!==e)););return(y-=o)===i||y%i==0&&y/i>=0}}},PSEUDO:function(t,e){var n,o=i.pseudos[t]||i.setFilters[t.toLowerCase()]||ot.error("unsupported pseudo: "+t);return o[x]?o(e):o.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,n){for(var i,r=o(t,e),a=r.length;a--;)t[i=R(t,r[a])]=!(n[i]=r[a])}):function(t){return o(t,0,n)}):o}},pseudos:{not:at(function(t){var e=[],n=[],i=s(t.replace(q,"$1"));return i[x]?at(function(t,e,n,o){for(var r,a=i(t,null,o,[]),s=t.length;s--;)(r=a[s])&&(t[s]=!(e[s]=r))}):function(t,o,r){return e[0]=t,i(e,null,r,n),e[0]=null,!n.pop()}}),has:at(function(t){return function(e){return ot(t,e).length>0}}),contains:at(function(t){return t=t.replace(et,nt),function(e){return(e.textContent||e.innerText||o(e)).indexOf(t)>-1}}),lang:at(function(t){return J.test(t||"")||ot.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===h},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return!1===t.disabled},disabled:function(t){return!0===t.disabled},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return Y.test(t.nodeName)},input:function(t){return G.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:dt(function(){return[0]}),last:dt(function(t,e){return[e-1]}),eq:dt(function(t,e,n){return[n<0?n+e:n]}),even:dt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:dt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:dt(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:dt(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=ct(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=ft(e);function ht(){}function gt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function mt(t,e,n){var i=e.dir,o=n&&"parentNode"===i,r=C++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||o)return t(e,n,r)}:function(e,n,a){var s,l,u,c=[T,r];if(a){for(;e=e[i];)if((1===e.nodeType||o)&&t(e,n,a))return!0}else for(;e=e[i];)if(1===e.nodeType||o){if((s=(l=(u=e[x]||(e[x]={}))[e.uniqueID]||(u[e.uniqueID]={}))[i])&&s[0]===T&&s[1]===r)return c[2]=s[2];if(l[i]=c,c[2]=t(e,n,a))return!0}}}function vt(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function bt(t,e,n,i,o){for(var r,a=[],s=0,l=t.length,u=null!=e;s<l;s++)(r=t[s])&&(n&&!n(r,i,o)||(a.push(r),u&&e.push(s)));return a}function yt(t,e,n,i,o,r){return i&&!i[x]&&(i=yt(i)),o&&!o[x]&&(o=yt(o,r)),at(function(r,a,s,l){var u,c,f,d=[],p=[],h=a.length,g=r||function(t,e,n){for(var i=0,o=e.length;i<o;i++)ot(t,e[i],n);return n}(e||"*",s.nodeType?[s]:s,[]),m=!t||!r&&e?g:bt(g,d,t,s,l),v=n?o||(r?t:h||i)?[]:a:m;if(n&&n(m,v,s,l),i)for(u=bt(v,p),i(u,[],s,l),c=u.length;c--;)(f=u[c])&&(v[p[c]]=!(m[p[c]]=f));if(r){if(o||t){if(o){for(u=[],c=v.length;c--;)(f=v[c])&&u.push(m[c]=f);o(null,v=[],u,l)}for(c=v.length;c--;)(f=v[c])&&(u=o?R(r,f):d[c])>-1&&(r[u]=!(a[u]=f))}}else v=bt(v===a?v.splice(h,v.length):v),o?o(null,a,v,l):I.apply(a,v)})}function xt(t){for(var e,n,o,r=t.length,a=i.relative[t[0].type],s=a||i.relative[" "],l=a?1:0,c=mt(function(t){return t===e},s,!0),f=mt(function(t){return R(e,t)>-1},s,!0),d=[function(t,n,i){var o=!a&&(i||n!==u)||((e=n).nodeType?c(t,n,i):f(t,n,i));return e=null,o}];l<r;l++)if(n=i.relative[t[l].type])d=[mt(vt(d),n)];else{if((n=i.filter[t[l].type].apply(null,t[l].matches))[x]){for(o=++l;o<r&&!i.relative[t[o].type];o++);return yt(l>1&&vt(d),l>1&&gt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(q,"$1"),n,l<o&&xt(t.slice(l,o)),o<r&&xt(t=t.slice(o)),o<r&&gt(t))}d.push(n)}return vt(d)}return ht.prototype=i.filters=i.pseudos,i.setFilters=new ht,a=ot.tokenize=function(t,e){var n,o,r,a,s,l,u,c=k[t+" "];if(c)return e?0:c.slice(0);for(s=t,l=[],u=i.preFilter;s;){for(a in n&&!(o=W.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(r=[])),n=!1,(o=U.exec(s))&&(n=o.shift(),r.push({value:n,type:o[0].replace(q," ")}),s=s.slice(n.length)),i.filter)!(o=X[a].exec(s))||u[a]&&!(o=u[a](o))||(n=o.shift(),r.push({value:n,type:a,matches:o}),s=s.slice(n.length));if(!n)break}return e?s.length:s?ot.error(t):k(t,l).slice(0)},s=ot.compile=function(t,e){var n,o=[],r=[],s=S[t+" "];if(!s){for(e||(e=a(t)),n=e.length;n--;)(s=xt(e[n]))[x]?o.push(s):r.push(s);(s=S(t,function(t,e){var n=e.length>0,o=t.length>0,r=function(r,a,s,l,c){var f,h,m,v=0,b="0",y=r&&[],x=[],w=u,C=r||o&&i.find.TAG("*",c),E=T+=null==w?1:Math.random()||.1,k=C.length;for(c&&(u=a===p||a||c);b!==k&&null!=(f=C[b]);b++){if(o&&f){for(h=0,a||f.ownerDocument===p||(d(f),s=!g);m=t[h++];)if(m(f,a||p,s)){l.push(f);break}c&&(T=E)}n&&((f=!m&&f)&&v--,r&&y.push(f))}if(v+=b,n&&b!==v){for(h=0;m=e[h++];)m(y,x,a,s);if(r){if(v>0)for(;b--;)y[b]||x[b]||(x[b]=O.call(l));x=bt(x)}I.apply(l,x),c&&!r&&x.length>0&&v+e.length>1&&ot.uniqueSort(l)}return c&&(T=E,u=w),y};return n?at(r):r}(r,o))).selector=t}return s},l=ot.select=function(t,e,o,r){var l,u,c,f,d,p="function"==typeof t&&t,h=!r&&a(t=p.selector||t);if(o=o||[],1===h.length){if((u=h[0]=h[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&n.getById&&9===e.nodeType&&g&&i.relative[u[1].type]){if(!(e=(i.find.ID(c.matches[0].replace(et,nt),e)||[])[0]))return o;p&&(e=e.parentNode),t=t.slice(u.shift().value.length)}for(l=X.needsContext.test(t)?0:u.length;l--&&(c=u[l],!i.relative[f=c.type]);)if((d=i.find[f])&&(r=d(c.matches[0].replace(et,nt),Q.test(u[0].type)&&pt(e.parentNode)||e))){if(u.splice(l,1),!(t=r.length&&gt(u)))return I.apply(o,r),o;break}}return(p||s(t,h))(r,e,!g,o,!e||Q.test(t)&&pt(e.parentNode)||e),o},n.sortStable=x.split("").sort(N).join("")===x,n.detectDuplicates=!!f,d(),n.sortDetached=st(function(t){return 1&t.compareDocumentPosition(p.createElement("div"))}),st(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||lt("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&st(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||lt("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),st(function(t){return null==t.getAttribute("disabled")})||lt(_,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),ot}(n);g.find=w,g.expr=w.selectors,g.expr[":"]=g.expr.pseudos,g.uniqueSort=g.unique=w.uniqueSort,g.text=w.getText,g.isXMLDoc=w.isXML,g.contains=w.contains;var T=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&g(t).is(n))break;i.push(t)}return i},C=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},E=g.expr.match.needsContext,k=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,S=/^.[^:#\[\.,]*$/;function N(t,e,n){if(g.isFunction(e))return g.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return g.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(S.test(e))return g.filter(e,t,n);e=g.filter(e,t)}return g.grep(t,function(t){return c.call(e,t)>-1!==n})}g.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?g.find.matchesSelector(i,t)?[i]:[]:g.find.matches(t,g.grep(e,function(t){return 1===t.nodeType}))},g.fn.extend({find:function(t){var e,n=this.length,i=[],o=this;if("string"!=typeof t)return this.pushStack(g(t).filter(function(){for(e=0;e<n;e++)if(g.contains(o[e],this))return!0}));for(e=0;e<n;e++)g.find(t,o[e],i);return(i=this.pushStack(n>1?g.unique(i):i)).selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(N(this,t||[],!1))},not:function(t){return this.pushStack(N(this,t||[],!0))},is:function(t){return!!N(this,"string"==typeof t&&E.test(t)?g(t):t||[],!1).length}});var D,$=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(g.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||D,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:$.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof g?e[0]:e,g.merge(this,g.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:a,!0)),k.test(i[1])&&g.isPlainObject(e))for(i in e)g.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(o=a.getElementById(i[2]))&&o.parentNode&&(this.length=1,this[0]=o),this.context=a,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):g.isFunction(t)?void 0!==n.ready?n.ready(t):t(g):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),g.makeArray(t,this))}).prototype=g.fn,D=g(a);var A=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function j(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}g.fn.extend({has:function(t){var e=g(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(g.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,o=this.length,r=[],a=E.test(t)||"string"!=typeof t?g(t,e||this.context):0;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&g.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?g.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?c.call(g(t),this[0]):c.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(g.uniqueSort(g.merge(this.get(),g(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),g.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return T(t,"parentNode")},parentsUntil:function(t,e,n){return T(t,"parentNode",n)},next:function(t){return j(t,"nextSibling")},prev:function(t){return j(t,"previousSibling")},nextAll:function(t){return T(t,"nextSibling")},prevAll:function(t){return T(t,"previousSibling")},nextUntil:function(t,e,n){return T(t,"nextSibling",n)},prevUntil:function(t,e,n){return T(t,"previousSibling",n)},siblings:function(t){return C((t.parentNode||{}).firstChild,t)},children:function(t){return C(t.firstChild)},contents:function(t){return t.contentDocument||g.merge([],t.childNodes)}},function(t,e){g.fn[t]=function(n,i){var o=g.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=g.filter(i,o)),this.length>1&&(O[t]||g.uniqueSort(o),A.test(t)&&o.reverse()),this.pushStack(o)}});var I,L=/\S+/g;function R(){a.removeEventListener("DOMContentLoaded",R),n.removeEventListener("load",R),g.ready()}g.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return g.each(t.match(L)||[],function(t,n){e[n]=!0}),e}(t):g.extend({},t);var e,n,i,o,r=[],a=[],s=-1,l=function(){for(o=t.once,i=e=!0;a.length;s=-1)for(n=a.shift();++s<r.length;)!1===r[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=r.length,n=!1);t.memory||(n=!1),e=!1,o&&(r=n?[]:"")},u={add:function(){return r&&(n&&!e&&(s=r.length-1,a.push(n)),function e(n){g.each(n,function(n,i){g.isFunction(i)?t.unique&&u.has(i)||r.push(i):i&&i.length&&"string"!==g.type(i)&&e(i)})}(arguments),n&&!e&&l()),this},remove:function(){return g.each(arguments,function(t,e){for(var n;(n=g.inArray(e,r,n))>-1;)r.splice(n,1),n<=s&&s--}),this},has:function(t){return t?g.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=a=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=a=[],n||(r=n=""),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},g.extend({Deferred:function(t){var e=[["resolve","done",g.Callbacks("once memory"),"resolved"],["reject","fail",g.Callbacks("once memory"),"rejected"],["notify","progress",g.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var t=arguments;return g.Deferred(function(n){g.each(e,function(e,r){var a=g.isFunction(t[e])&&t[e];o[r[1]](function(){var t=a&&a.apply(this,arguments);t&&g.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this===i?n.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?g.extend(t,i):i}},o={};return i.pipe=i.then,g.each(e,function(t,r){var a=r[2],s=r[3];i[r[1]]=a.add,s&&a.add(function(){n=s},e[1^t][2].disable,e[2][2].lock),o[r[0]]=function(){return o[r[0]+"With"](this===o?i:this,arguments),this},o[r[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e,n,i,o=0,r=s.call(arguments),a=r.length,l=1!==a||t&&g.isFunction(t.promise)?a:0,u=1===l?t:g.Deferred(),c=function(t,n,i){return function(o){n[t]=this,i[t]=arguments.length>1?s.call(arguments):o,i===e?u.notifyWith(n,i):--l||u.resolveWith(n,i)}};if(a>1)for(e=new Array(a),n=new Array(a),i=new Array(a);o<a;o++)r[o]&&g.isFunction(r[o].promise)?r[o].promise().progress(c(o,n,e)).done(c(o,i,r)).fail(u.reject):--l;return l||u.resolveWith(i,r),u.promise()}}),g.fn.ready=function(t){return g.ready.promise().done(t),this},g.extend({isReady:!1,readyWait:1,holdReady:function(t){t?g.readyWait++:g.ready(!0)},ready:function(t){(!0===t?--g.readyWait:g.isReady)||(g.isReady=!0,!0!==t&&--g.readyWait>0||(I.resolveWith(a,[g]),g.fn.triggerHandler&&(g(a).triggerHandler("ready"),g(a).off("ready"))))}}),g.ready.promise=function(t){return I||(I=g.Deferred(),"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(g.ready):(a.addEventListener("DOMContentLoaded",R),n.addEventListener("load",R))),I.promise(t)},g.ready.promise();var _=function(t,e,n,i,o,r,a){var s=0,l=t.length,u=null==n;if("object"===g.type(n))for(s in o=!0,n)_(t,e,s,n[s],!0,r,a);else if(void 0!==i&&(o=!0,g.isFunction(i)||(a=!0),u&&(a?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(g(t),n)})),e))for(;s<l;s++)e(t[s],n,a?i:i.call(t[s],s,e(t[s],n)));return o?t:u?e.call(t):l?e(t[0],n):r},F=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function H(){this.expando=g.expando+H.uid++}H.uid=1,H.prototype={register:function(t,e){var n=e||{};return t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!F(t))return{};var e=t[this.expando];return e||(e={},F(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[e]=n;else for(i in e)o[i]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?void 0!==(i=this.get(t,e))?i:this.get(t,g.camelCase(e)):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,o,r=t[this.expando];if(void 0!==r){if(void 0===e)this.register(t);else{g.isArray(e)?i=e.concat(e.map(g.camelCase)):(o=g.camelCase(e),i=e in r?[e,o]:(i=o)in r?[i]:i.match(L)||[]),n=i.length;for(;n--;)delete r[i[n]]}(void 0===e||g.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!g.isEmptyObject(e)}};var P=new H,M=new H,B=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,q=/[A-Z]/g;function W(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(q,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:B.test(n)?g.parseJSON(n):n)}catch(t){}M.set(t,e,n)}else n=void 0;return n}g.extend({hasData:function(t){return M.hasData(t)||P.hasData(t)},data:function(t,e,n){return M.access(t,e,n)},removeData:function(t,e){M.remove(t,e)},_data:function(t,e,n){return P.access(t,e,n)},_removeData:function(t,e){P.remove(t,e)}}),g.fn.extend({data:function(t,e){var n,i,o,r=this[0],a=r&&r.attributes;if(void 0===t){if(this.length&&(o=M.get(r),1===r.nodeType&&!P.get(r,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=g.camelCase(i.slice(5)),W(r,i,o[i]));P.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){M.set(this,t)}):_(this,function(e){var n,i;if(r&&void 0===e)return void 0!==(n=M.get(r,t)||M.get(r,t.replace(q,"-$&").toLowerCase()))?n:(i=g.camelCase(t),void 0!==(n=M.get(r,i))?n:void 0!==(n=W(r,i,void 0))?n:void 0);i=g.camelCase(t),this.each(function(){var n=M.get(this,i);M.set(this,i,e),t.indexOf("-")>-1&&void 0!==n&&M.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){M.remove(this,t)})}}),g.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=P.get(t,e),n&&(!i||g.isArray(n)?i=P.access(t,e,g.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=g.queue(t,e),i=n.length,o=n.shift(),r=g._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,function(){g.dequeue(t,e)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return P.get(t,n)||P.access(t,n,{empty:g.Callbacks("once memory").add(function(){P.remove(t,[e+"queue",n])})})}}),g.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?g.queue(this[0],t):void 0===e?this:this.each(function(){var n=g.queue(this,t,e);g._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&g.dequeue(this,t)})},dequeue:function(t){return this.each(function(){g.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=g.Deferred(),r=this,a=this.length,s=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=P.get(r[a],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),o.promise(e)}});var U=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,V=new RegExp("^(?:([+-])=|)("+U+")([a-z%]*)$","i"),z=["Top","Right","Bottom","Left"],J=function(t,e){return t=e||t,"none"===g.css(t,"display")||!g.contains(t.ownerDocument,t)};function X(t,e,n,i){var o,r=1,a=20,s=i?function(){return i.cur()}:function(){return g.css(t,e,"")},l=s(),u=n&&n[3]||(g.cssNumber[e]?"":"px"),c=(g.cssNumber[e]||"px"!==u&&+l)&&V.exec(g.css(t,e));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do{c/=r=r||".5",g.style(t,e,c+u)}while(r!==(r=s()/l)&&1!==r&&--a)}return n&&(c=+c||+l||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=o)),o}var G=/^(?:checkbox|radio)$/i,Y=/<([\w:-]+)/,K=/^$|\/(?:java|ecma)script/i,Z={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Q(t,e){var n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&g.nodeName(t,e)?g.merge([t],n):n}function tt(t,e){for(var n=0,i=t.length;n<i;n++)P.set(t[n],"globalEval",!e||P.get(e[n],"globalEval"))}Z.optgroup=Z.option,Z.tbody=Z.tfoot=Z.colgroup=Z.caption=Z.thead,Z.th=Z.td;var et,nt,it=/<|&#?\w+;/;function ot(t,e,n,i,o){for(var r,a,s,l,u,c,f=e.createDocumentFragment(),d=[],p=0,h=t.length;p<h;p++)if((r=t[p])||0===r)if("object"===g.type(r))g.merge(d,r.nodeType?[r]:r);else if(it.test(r)){for(a=a||f.appendChild(e.createElement("div")),s=(Y.exec(r)||["",""])[1].toLowerCase(),l=Z[s]||Z._default,a.innerHTML=l[1]+g.htmlPrefilter(r)+l[2],c=l[0];c--;)a=a.lastChild;g.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(e.createTextNode(r));for(f.textContent="",p=0;r=d[p++];)if(i&&g.inArray(r,i)>-1)o&&o.push(r);else if(u=g.contains(r.ownerDocument,r),a=Q(f.appendChild(r),"script"),u&&tt(a),n)for(c=0;r=a[c++];)K.test(r.type||"")&&n.push(r);return f}et=a.createDocumentFragment().appendChild(a.createElement("div")),(nt=a.createElement("input")).setAttribute("type","radio"),nt.setAttribute("checked","checked"),nt.setAttribute("name","t"),et.appendChild(nt),h.checkClone=et.cloneNode(!0).cloneNode(!0).lastChild.checked,et.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!et.cloneNode(!0).lastChild.defaultValue;var rt=/^key/,at=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,st=/^([^.]*)(?:\.(.+)|)/;function lt(){return!0}function ut(){return!1}function ct(){try{return a.activeElement}catch(t){}}function ft(t,e,n,i,o,r){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(i=i||n,n=void 0),e)ft(t,s,n,i,e[s],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=ut;else if(!o)return t;return 1===r&&(a=o,(o=function(t){return g().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=g.guid++)),t.each(function(){g.event.add(this,e,o,i,n)})}g.event={global:{},add:function(t,e,n,i,o){var r,a,s,l,u,c,f,d,p,h,m,v=P.get(t);if(v)for(n.handler&&(n=(r=n).handler,o=r.selector),n.guid||(n.guid=g.guid++),(l=v.events)||(l=v.events={}),(a=v.handle)||(a=v.handle=function(e){return void 0!==g&&g.event.triggered!==e.type?g.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(L)||[""]).length;u--;)p=m=(s=st.exec(e[u])||[])[1],h=(s[2]||"").split(".").sort(),p&&(f=g.event.special[p]||{},p=(o?f.delegateType:f.bindType)||p,f=g.event.special[p]||{},c=g.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&g.expr.match.needsContext.test(o),namespace:h.join(".")},r),(d=l[p])||((d=l[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,i,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,c):d.push(c),g.event.global[p]=!0)},remove:function(t,e,n,i,o){var r,a,s,l,u,c,f,d,p,h,m,v=P.hasData(t)&&P.get(t);if(v&&(l=v.events)){for(u=(e=(e||"").match(L)||[""]).length;u--;)if(p=m=(s=st.exec(e[u])||[])[1],h=(s[2]||"").split(".").sort(),p){for(f=g.event.special[p]||{},d=l[p=(i?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=r=d.length;r--;)c=d[r],!o&&m!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(d.splice(r,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(t,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(t,h,v.handle)||g.removeEvent(t,p,v.handle),delete l[p])}else for(p in l)g.event.remove(t,p+e[u],n,i,!0);g.isEmptyObject(l)&&P.remove(t,"handle events")}},dispatch:function(t){t=g.event.fix(t);var e,n,i,o,r,a,l=s.call(arguments),u=(P.get(this,"events")||{})[t.type]||[],c=g.event.special[t.type]||{};if(l[0]=t,t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){for(a=g.event.handlers.call(this,t,u),e=0;(o=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(r.namespace)||(t.handleObj=r,t.data=r.data,void 0!==(i=((g.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,o,r,a=[],s=e.delegateCount,l=t.target;if(s&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==t.type)){for(i=[],n=0;n<s;n++)void 0===i[o=(r=e[n]).selector+" "]&&(i[o]=r.needsContext?g(o,this).index(l)>-1:g.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&a.push({elem:l,handlers:i})}return s<e.length&&a.push({elem:this,handlers:e.slice(s)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,o,r=e.button;return null==t.pageX&&null!=e.clientX&&(i=(n=t.target.ownerDocument||a).documentElement,o=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||o&&o.scrollLeft||0)-(i&&i.clientLeft||o&&o.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||o&&o.scrollTop||0)-(i&&i.clientTop||o&&o.clientTop||0)),t.which||void 0===r||(t.which=1&r?1:2&r?3:4&r?2:0),t}},fix:function(t){if(t[g.expando])return t;var e,n,i,o=t.type,r=t,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=at.test(o)?this.mouseHooks:rt.test(o)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new g.Event(r),e=i.length;e--;)t[n=i[e]]=r[n];return t.target||(t.target=a),3===t.target.nodeType&&(t.target=t.target.parentNode),s.filter?s.filter(t,r):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ct()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===ct()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&g.nodeName(this,"input"))return this.click(),!1},_default:function(t){return g.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},g.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},g.Event=function(t,e){if(!(this instanceof g.Event))return new g.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?lt:ut):this.type=t,e&&g.extend(this,e),this.timeStamp=t&&t.timeStamp||g.now(),this[g.expando]=!0},g.Event.prototype={constructor:g.Event,isDefaultPrevented:ut,isPropagationStopped:ut,isImmediatePropagationStopped:ut,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=lt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=lt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=lt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},g.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){g.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,o=t.handleObj;return i&&(i===this||g.contains(this,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),g.fn.extend({on:function(t,e,n,i){return ft(this,t,e,n,i)},one:function(t,e,n,i){return ft(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,g(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=ut),this.each(function(){g.event.remove(this,t,n,e)})}});var dt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,pt=/<script|<style|<link/i,ht=/checked\s*(?:[^=]|=\s*.checked.)/i,gt=/^true\/(.*)/,mt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function vt(t,e){return g.nodeName(t,"table")&&g.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function bt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function yt(t){var e=gt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function xt(t,e){var n,i,o,r,a,s,l,u;if(1===e.nodeType){if(P.hasData(t)&&(r=P.access(t),a=P.set(e,r),u=r.events))for(o in delete a.handle,a.events={},u)for(n=0,i=u[o].length;n<i;n++)g.event.add(e,o,u[o][n]);M.hasData(t)&&(s=M.access(t),l=g.extend({},s),M.set(e,l))}}function wt(t,e,n,i){e=l.apply([],e);var o,r,a,s,u,c,f=0,d=t.length,p=d-1,m=e[0],v=g.isFunction(m);if(v||d>1&&"string"==typeof m&&!h.checkClone&&ht.test(m))return t.each(function(o){var r=t.eq(o);v&&(e[0]=m.call(this,o,r.html())),wt(r,e,n,i)});if(d&&(r=(o=ot(e,t[0].ownerDocument,!1,t,i)).firstChild,1===o.childNodes.length&&(o=r),r||i)){for(s=(a=g.map(Q(o,"script"),bt)).length;f<d;f++)u=o,f!==p&&(u=g.clone(u,!0,!0),s&&g.merge(a,Q(u,"script"))),n.call(t[f],u,f);if(s)for(c=a[a.length-1].ownerDocument,g.map(a,yt),f=0;f<s;f++)u=a[f],K.test(u.type||"")&&!P.access(u,"globalEval")&&g.contains(c,u)&&(u.src?g._evalUrl&&g._evalUrl(u.src):g.globalEval(u.textContent.replace(mt,"")))}return t}function Tt(t,e,n){for(var i,o=e?g.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||g.cleanData(Q(i)),i.parentNode&&(n&&g.contains(i.ownerDocument,i)&&tt(Q(i,"script")),i.parentNode.removeChild(i));return t}g.extend({htmlPrefilter:function(t){return t.replace(dt,"<$1></$2>")},clone:function(t,e,n){var i,o,r,a,s,l,u,c=t.cloneNode(!0),f=g.contains(t.ownerDocument,t);if(!(h.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||g.isXMLDoc(t)))for(a=Q(c),i=0,o=(r=Q(t)).length;i<o;i++)s=r[i],l=a[i],u=void 0,"input"===(u=l.nodeName.toLowerCase())&&G.test(s.type)?l.checked=s.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=s.defaultValue);if(e)if(n)for(r=r||Q(t),a=a||Q(c),i=0,o=r.length;i<o;i++)xt(r[i],a[i]);else xt(t,c);return(a=Q(c,"script")).length>0&&tt(a,!f&&Q(t,"script")),c},cleanData:function(t){for(var e,n,i,o=g.event.special,r=0;void 0!==(n=t[r]);r++)if(F(n)){if(e=n[P.expando]){if(e.events)for(i in e.events)o[i]?g.event.remove(n,i):g.removeEvent(n,i,e.handle);n[P.expando]=void 0}n[M.expando]&&(n[M.expando]=void 0)}}}),g.fn.extend({domManip:wt,detach:function(t){return Tt(this,t,!0)},remove:function(t){return Tt(this,t)},text:function(t){return _(this,function(t){return void 0===t?g.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return wt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||vt(this,t).appendChild(t)})},prepend:function(){return wt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=vt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return wt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return wt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(g.cleanData(Q(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return g.clone(this,t,e)})},html:function(t){return _(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!pt.test(t)&&!Z[(Y.exec(t)||["",""])[1].toLowerCase()]){t=g.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(g.cleanData(Q(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return wt(this,arguments,function(e){var n=this.parentNode;g.inArray(this,t)<0&&(g.cleanData(Q(this)),n&&n.replaceChild(e,this))},t)}}),g.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){g.fn[t]=function(t){for(var n,i=[],o=g(t),r=o.length-1,a=0;a<=r;a++)n=a===r?this:this.clone(!0),g(o[a])[e](n),u.apply(i,n.get());return this.pushStack(i)}});var Ct,Et={HTML:"block",BODY:"block"};function kt(t,e){var n=g(e.createElement(t)).appendTo(e.body),i=g.css(n[0],"display");return n.detach(),i}function St(t){var e=a,n=Et[t];return n||("none"!==(n=kt(t,e))&&n||((e=(Ct=(Ct||g("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement))[0].contentDocument).write(),e.close(),n=kt(t,e),Ct.detach()),Et[t]=n),n}var Nt=/^margin/,Dt=new RegExp("^("+U+")(?!px)[a-z%]+$","i"),$t=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},At=function(t,e,n,i){var o,r,a={};for(r in e)a[r]=t.style[r],t.style[r]=e[r];for(r in o=n.apply(t,i||[]),e)t.style[r]=a[r];return o},Ot=a.documentElement;function jt(t,e,n){var i,o,r,a,s=t.style;return""!==(a=(n=n||$t(t))?n.getPropertyValue(e)||n[e]:void 0)&&void 0!==a||g.contains(t.ownerDocument,t)||(a=g.style(t,e)),n&&!h.pixelMarginRight()&&Dt.test(a)&&Nt.test(e)&&(i=s.width,o=s.minWidth,r=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=o,s.maxWidth=r),void 0!==a?a+"":a}function It(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){var t,e,i,o,r=a.createElement("div"),s=a.createElement("div");function l(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ot.appendChild(r);var a=n.getComputedStyle(s);t="1%"!==a.top,o="2px"===a.marginLeft,e="4px"===a.width,s.style.marginRight="50%",i="4px"===a.marginRight,Ot.removeChild(r)}s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===s.style.backgroundClip,r.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",r.appendChild(s),g.extend(h,{pixelPosition:function(){return l(),t},boxSizingReliable:function(){return null==e&&l(),e},pixelMarginRight:function(){return null==e&&l(),i},reliableMarginLeft:function(){return null==e&&l(),o},reliableMarginRight:function(){var t,e=s.appendChild(a.createElement("div"));return e.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",e.style.marginRight=e.style.width="0",s.style.width="1px",Ot.appendChild(r),t=!parseFloat(n.getComputedStyle(e).marginRight),Ot.removeChild(r),s.removeChild(e),t}}))}();var Lt=/^(none|table(?!-c[ea]).+)/,Rt={position:"absolute",visibility:"hidden",display:"block"},_t={letterSpacing:"0",fontWeight:"400"},Ft=["Webkit","O","Moz","ms"],Ht=a.createElement("div").style;function Pt(t){if(t in Ht)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Ft.length;n--;)if((t=Ft[n]+e)in Ht)return t}function Mt(t,e,n){var i=V.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function Bt(t,e,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===e?1:0,a=0;r<4;r+=2)"margin"===n&&(a+=g.css(t,n+z[r],!0,o)),i?("content"===n&&(a-=g.css(t,"padding"+z[r],!0,o)),"margin"!==n&&(a-=g.css(t,"border"+z[r]+"Width",!0,o))):(a+=g.css(t,"padding"+z[r],!0,o),"padding"!==n&&(a+=g.css(t,"border"+z[r]+"Width",!0,o)));return a}function qt(t,e,n){var i=!0,o="width"===e?t.offsetWidth:t.offsetHeight,r=$t(t),a="border-box"===g.css(t,"boxSizing",!1,r);if(o<=0||null==o){if(((o=jt(t,e,r))<0||null==o)&&(o=t.style[e]),Dt.test(o))return o;i=a&&(h.boxSizingReliable()||o===t.style[e]),o=parseFloat(o)||0}return o+Bt(t,e,n||(a?"border":"content"),i,r)+"px"}function Wt(t,e){for(var n,i,o,r=[],a=0,s=t.length;a<s;a++)(i=t[a]).style&&(r[a]=P.get(i,"olddisplay"),n=i.style.display,e?(r[a]||"none"!==n||(i.style.display=""),""===i.style.display&&J(i)&&(r[a]=P.access(i,"olddisplay",St(i.nodeName)))):(o=J(i),"none"===n&&o||P.set(i,"olddisplay",o?n:g.css(i,"display"))));for(a=0;a<s;a++)(i=t[a]).style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?r[a]||"":"none"));return t}function Ut(t,e,n,i,o){return new Ut.prototype.init(t,e,n,i,o)}g.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=jt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,a,s=g.camelCase(e),l=t.style;if(e=g.cssProps[s]||(g.cssProps[s]=Pt(s)||s),a=g.cssHooks[e]||g.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(t,!1,i))?o:l[e];"string"===(r=typeof n)&&(o=V.exec(n))&&o[1]&&(n=X(t,e,o),r="number"),null!=n&&n==n&&("number"===r&&(n+=o&&o[3]||(g.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,i))||(l[e]=n))}},css:function(t,e,n,i){var o,r,a,s=g.camelCase(e);return e=g.cssProps[s]||(g.cssProps[s]=Pt(s)||s),(a=g.cssHooks[e]||g.cssHooks[s])&&"get"in a&&(o=a.get(t,!0,n)),void 0===o&&(o=jt(t,e,i)),"normal"===o&&e in _t&&(o=_t[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),g.each(["height","width"],function(t,e){g.cssHooks[e]={get:function(t,n,i){if(n)return Lt.test(g.css(t,"display"))&&0===t.offsetWidth?At(t,Rt,function(){return qt(t,e,i)}):qt(t,e,i)},set:function(t,n,i){var o,r=i&&$t(t),a=i&&Bt(t,e,i,"border-box"===g.css(t,"boxSizing",!1,r),r);return a&&(o=V.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=g.css(t,e)),Mt(0,n,a)}}}),g.cssHooks.marginLeft=It(h.reliableMarginLeft,function(t,e){if(e)return(parseFloat(jt(t,"marginLeft"))||t.getBoundingClientRect().left-At(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),g.cssHooks.marginRight=It(h.reliableMarginRight,function(t,e){if(e)return At(t,{display:"inline-block"},jt,[t,"marginRight"])}),g.each({margin:"",padding:"",border:"Width"},function(t,e){g.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+z[i]+e]=r[i]||r[i-2]||r[0];return o}},Nt.test(t)||(g.cssHooks[t+e].set=Mt)}),g.fn.extend({css:function(t,e){return _(this,function(t,e,n){var i,o,r={},a=0;if(g.isArray(e)){for(i=$t(t),o=e.length;a<o;a++)r[e[a]]=g.css(t,e[a],!1,i);return r}return void 0!==n?g.style(t,e,n):g.css(t,e)},t,e,arguments.length>1)},show:function(){return Wt(this,!0)},hide:function(){return Wt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){J(this)?g(this).show():g(this).hide()})}}),g.Tween=Ut,Ut.prototype={constructor:Ut,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||g.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(g.cssNumber[n]?"":"px")},cur:function(){var t=Ut.propHooks[this.prop];return t&&t.get?t.get(this):Ut.propHooks._default.get(this)},run:function(t){var e,n=Ut.propHooks[this.prop];return this.options.duration?this.pos=e=g.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Ut.propHooks._default.set(this),this}},Ut.prototype.init.prototype=Ut.prototype,Ut.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=g.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){g.fx.step[t.prop]?g.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[g.cssProps[t.prop]]&&!g.cssHooks[t.prop]?t.elem[t.prop]=t.now:g.style(t.elem,t.prop,t.now+t.unit)}}},Ut.propHooks.scrollTop=Ut.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},g.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},g.fx=Ut.prototype.init,g.fx.step={};var Vt,zt,Jt=/^(?:toggle|show|hide)$/,Xt=/queueHooks$/;function Gt(){return n.setTimeout(function(){Vt=void 0}),Vt=g.now()}function Yt(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=z[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function Kt(t,e,n){for(var i,o=(Zt.tweeners[e]||[]).concat(Zt.tweeners["*"]),r=0,a=o.length;r<a;r++)if(i=o[r].call(n,e,t))return i}function Zt(t,e,n){var i,o,r=0,a=Zt.prefilters.length,s=g.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=Vt||Gt(),n=Math.max(0,u.startTime+u.duration-e),i=1-(n/u.duration||0),r=0,a=u.tweens.length;r<a;r++)u.tweens[r].run(i);return s.notifyWith(t,[u,i,n]),i<1&&a?n:(s.resolveWith(t,[u]),!1)},u=s.promise({elem:t,props:g.extend({},e),opts:g.extend(!0,{specialEasing:{},easing:g.easing._default},n),originalProperties:e,originalOptions:n,startTime:Vt||Gt(),duration:n.duration,tweens:[],createTween:function(e,n){var i=g.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)u.tweens[n].run(1);return e?(s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u,e])):s.rejectWith(t,[u,e]),this}}),c=u.props;for(!function(t,e){var n,i,o,r,a;for(n in t)if(o=e[i=g.camelCase(n)],r=t[n],g.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),(a=g.cssHooks[i])&&"expand"in a)for(n in r=a.expand(r),delete t[i],r)n in t||(t[n]=r[n],e[n]=o);else e[i]=o}(c,u.opts.specialEasing);r<a;r++)if(i=Zt.prefilters[r].call(u,t,c,u.opts))return g.isFunction(i.stop)&&(g._queueHooks(u.elem,u.opts.queue).stop=g.proxy(i.stop,i)),i;return g.map(c,Kt,u),g.isFunction(u.opts.start)&&u.opts.start.call(t,u),g.fx.timer(g.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}g.Animation=g.extend(Zt,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return X(n.elem,t,V.exec(e),n),n}]},tweener:function(t,e){g.isFunction(t)?(e=t,t=["*"]):t=t.match(L);for(var n,i=0,o=t.length;i<o;i++)n=t[i],Zt.tweeners[n]=Zt.tweeners[n]||[],Zt.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,r,a,s,l,u,c=this,f={},d=t.style,p=t.nodeType&&J(t),h=P.get(t,"fxshow");for(i in n.queue||(null==(s=g._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,c.always(function(){c.always(function(){s.unqueued--,g.queue(t,"fx").length||s.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],"inline"===("none"===(u=g.css(t,"display"))?P.get(t,"olddisplay")||St(t.nodeName):u)&&"none"===g.css(t,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",c.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),e)if(o=e[i],Jt.exec(o)){if(delete e[i],r=r||"toggle"===o,o===(p?"hide":"show")){if("show"!==o||!h||void 0===h[i])continue;p=!0}f[i]=h&&h[i]||g.style(t,i)}else u=void 0;if(g.isEmptyObject(f))"inline"===("none"===u?St(t.nodeName):u)&&(d.display=u);else for(i in h?"hidden"in h&&(p=h.hidden):h=P.access(t,"fxshow",{}),r&&(h.hidden=!p),p?g(t).show():c.done(function(){g(t).hide()}),c.done(function(){var e;for(e in P.remove(t,"fxshow"),f)g.style(t,e,f[e])}),f)a=Kt(p?h[i]:0,i,c),i in h||(h[i]=a.start,p&&(a.end=a.start,a.start="width"===i||"height"===i?1:0))}],prefilter:function(t,e){e?Zt.prefilters.unshift(t):Zt.prefilters.push(t)}}),g.speed=function(t,e,n){var i=t&&"object"==typeof t?g.extend({},t):{complete:n||!n&&e||g.isFunction(t)&&t,duration:t,easing:n&&e||e&&!g.isFunction(e)&&e};return i.duration=g.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in g.fx.speeds?g.fx.speeds[i.duration]:g.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){g.isFunction(i.old)&&i.old.call(this),i.queue&&g.dequeue(this,i.queue)},i},g.fn.extend({fadeTo:function(t,e,n,i){return this.filter(J).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=g.isEmptyObject(t),r=g.speed(e,n,i),a=function(){var e=Zt(this,g.extend({},t),r);(o||P.get(this,"finish"))&&e.stop(!0)};return a.finish=a,o||!1===r.queue?this.each(a):this.queue(r.queue,a)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",r=g.timers,a=P.get(this);if(o)a[o]&&a[o].stop&&i(a[o]);else for(o in a)a[o]&&a[o].stop&&Xt.test(o)&&i(a[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));!e&&n||g.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=P.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=g.timers,a=i?i.length:0;for(n.finish=!0,g.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<a;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),g.each(["toggle","show","hide"],function(t,e){var n=g.fn[e];g.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(Yt(e,!0),t,i,o)}}),g.each({slideDown:Yt("show"),slideUp:Yt("hide"),slideToggle:Yt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){g.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),g.timers=[],g.fx.tick=function(){var t,e=0,n=g.timers;for(Vt=g.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||g.fx.stop(),Vt=void 0},g.fx.timer=function(t){g.timers.push(t),t()?g.fx.start():g.timers.pop()},g.fx.interval=13,g.fx.start=function(){zt||(zt=n.setInterval(g.fx.tick,g.fx.interval))},g.fx.stop=function(){n.clearInterval(zt),zt=null},g.fx.speeds={slow:600,fast:200,_default:400},g.fn.delay=function(t,e){return t=g.fx&&g.fx.speeds[t]||t,e=e||"fx",this.queue(e,function(e,i){var o=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(o)}})},function(){var t=a.createElement("input"),e=a.createElement("select"),n=e.appendChild(a.createElement("option"));t.type="checkbox",h.checkOn=""!==t.value,h.optSelected=n.selected,e.disabled=!0,h.optDisabled=!n.disabled,(t=a.createElement("input")).value="t",t.type="radio",h.radioValue="t"===t.value}();var Qt,te=g.expr.attrHandle;g.fn.extend({attr:function(t,e){return _(this,g.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){g.removeAttr(this,t)})}}),g.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?g.prop(t,e,n):(1===r&&g.isXMLDoc(t)||(e=e.toLowerCase(),o=g.attrHooks[e]||(g.expr.match.bool.test(e)?Qt:void 0)),void 0!==n?null===n?void g.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:null==(i=g.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!h.radioValue&&"radio"===e&&g.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i,o=0,r=e&&e.match(L);if(r&&1===t.nodeType)for(;n=r[o++];)i=g.propFix[n]||n,g.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)}}),Qt={set:function(t,e,n){return!1===e?g.removeAttr(t,n):t.setAttribute(n,n),n}},g.each(g.expr.match.bool.source.match(/\w+/g),function(t,e){var n=te[e]||g.find.attr;te[e]=function(t,e,i){var o,r;return i||(r=te[e],te[e]=o,o=null!=n(t,e,i)?e.toLowerCase():null,te[e]=r),o}});var ee=/^(?:input|select|textarea|button)$/i,ne=/^(?:a|area)$/i;g.fn.extend({prop:function(t,e){return _(this,g.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[g.propFix[t]||t]})}}),g.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&g.isXMLDoc(t)||(e=g.propFix[e]||e,o=g.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=g.find.attr(t,"tabindex");return e?parseInt(e,10):ee.test(t.nodeName)||ne.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(g.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),g.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){g.propFix[this.toLowerCase()]=this});var ie=/[\t\r\n\f]/g;function oe(t){return t.getAttribute&&t.getAttribute("class")||""}g.fn.extend({addClass:function(t){var e,n,i,o,r,a,s,l=0;if(g.isFunction(t))return this.each(function(e){g(this).addClass(t.call(this,e,oe(this)))});if("string"==typeof t&&t)for(e=t.match(L)||[];n=this[l++];)if(o=oe(n),i=1===n.nodeType&&(" "+o+" ").replace(ie," ")){for(a=0;r=e[a++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(s=g.trim(i))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,i,o,r,a,s,l=0;if(g.isFunction(t))return this.each(function(e){g(this).removeClass(t.call(this,e,oe(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(L)||[];n=this[l++];)if(o=oe(n),i=1===n.nodeType&&(" "+o+" ").replace(ie," ")){for(a=0;r=e[a++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(s=g.trim(i))&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):g.isFunction(t)?this.each(function(n){g(this).toggleClass(t.call(this,n,oe(this),e),e)}):this.each(function(){var e,i,o,r;if("string"===n)for(i=0,o=g(this),r=t.match(L)||[];e=r[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=oe(this))&&P.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":P.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+oe(n)+" ").replace(ie," ").indexOf(e)>-1)return!0;return!1}});var re=/\r/g,ae=/[\x20\t\r\n\f]+/g;g.fn.extend({val:function(t){var e,n,i,o=this[0];return arguments.length?(i=g.isFunction(t),this.each(function(n){var o;1===this.nodeType&&(null==(o=i?t.call(this,n,g(this).val()):t)?o="":"number"==typeof o?o+="":g.isArray(o)&&(o=g.map(o,function(t){return null==t?"":t+""})),(e=g.valHooks[this.type]||g.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))})):o?(e=g.valHooks[o.type]||g.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(re,""):null==n?"":n:void 0}}),g.extend({valHooks:{option:{get:function(t){var e=g.find.attr(t,"value");return null!=e?e:g.trim(g.text(t)).replace(ae," ")}},select:{get:function(t){for(var e,n,i=t.options,o=t.selectedIndex,r="select-one"===t.type||o<0,a=r?null:[],s=r?o+1:i.length,l=o<0?s:r?o:0;l<s;l++)if(((n=i[l]).selected||l===o)&&(h.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!g.nodeName(n.parentNode,"optgroup"))){if(e=g(n).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var n,i,o=t.options,r=g.makeArray(e),a=o.length;a--;)((i=o[a]).selected=g.inArray(g.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),g.each(["radio","checkbox"],function(){g.valHooks[this]={set:function(t,e){if(g.isArray(e))return t.checked=g.inArray(g(t).val(),e)>-1}},h.checkOn||(g.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var se=/^(?:focusinfocus|focusoutblur)$/;g.extend(g.event,{trigger:function(t,e,i,o){var r,s,l,u,c,f,d,h=[i||a],m=p.call(t,"type")?t.type:t,v=p.call(t,"namespace")?t.namespace.split("."):[];if(s=l=i=i||a,3!==i.nodeType&&8!==i.nodeType&&!se.test(m+g.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),c=m.indexOf(":")<0&&"on"+m,(t=t[g.expando]?t:new g.Event(m,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:g.makeArray(e,[t]),d=g.event.special[m]||{},o||!d.trigger||!1!==d.trigger.apply(i,e))){if(!o&&!d.noBubble&&!g.isWindow(i)){for(u=d.delegateType||m,se.test(u+m)||(s=s.parentNode);s;s=s.parentNode)h.push(s),l=s;l===(i.ownerDocument||a)&&h.push(l.defaultView||l.parentWindow||n)}for(r=0;(s=h[r++])&&!t.isPropagationStopped();)t.type=r>1?u:d.bindType||m,(f=(P.get(s,"events")||{})[t.type]&&P.get(s,"handle"))&&f.apply(s,e),(f=c&&s[c])&&f.apply&&F(s)&&(t.result=f.apply(s,e),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),e)||!F(i)||c&&g.isFunction(i[m])&&!g.isWindow(i)&&((l=i[c])&&(i[c]=null),g.event.triggered=m,i[m](),g.event.triggered=void 0,l&&(i[c]=l)),t.result}},simulate:function(t,e,n){var i=g.extend(new g.Event,n,{type:t,isSimulated:!0});g.event.trigger(i,null,e)}}),g.fn.extend({trigger:function(t,e){return this.each(function(){g.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return g.event.trigger(t,e,n,!0)}}),g.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){g.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),g.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),h.focusin="onfocusin"in n,h.focusin||g.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){g.event.simulate(e,t.target,g.event.fix(t))};g.event.special[e]={setup:function(){var i=this.ownerDocument||this,o=P.access(i,e);o||i.addEventListener(t,n,!0),P.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=P.access(i,e)-1;o?P.access(i,e,o):(i.removeEventListener(t,n,!0),P.remove(i,e))}}});var le=n.location,ue=g.now(),ce=/\?/;g.parseJSON=function(t){return JSON.parse(t+"")},g.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||g.error("Invalid XML: "+t),e};var fe=/#.*$/,de=/([?&])_=[^&]*/,pe=/^(.*?):[ \t]*([^\r\n]*)$/gm,he=/^(?:GET|HEAD)$/,ge=/^\/\//,me={},ve={},be="*/".concat("*"),ye=a.createElement("a");function xe(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(L)||[];if(g.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function we(t,e,n,i){var o={},r=t===ve;function a(s){var l;return o[s]=!0,g.each(t[s]||[],function(t,s){var u=s(e,n,i);return"string"!=typeof u||r||o[u]?r?!(l=u):void 0:(e.dataTypes.unshift(u),a(u),!1)}),l}return a(e.dataTypes[0])||!o["*"]&&a("*")}function Te(t,e){var n,i,o=g.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&g.extend(!0,t,i),t}ye.href=le.href,g.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:le.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(le.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":g.parseJSON,"text xml":g.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Te(Te(t,g.ajaxSettings),e):Te(g.ajaxSettings,t)},ajaxPrefilter:xe(me),ajaxTransport:xe(ve),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,o,r,s,l,u,c,f,d=g.ajaxSetup({},e),p=d.context||d,h=d.context&&(p.nodeType||p.jquery)?g(p):g.event,m=g.Deferred(),v=g.Callbacks("once memory"),b=d.statusCode||{},y={},x={},w=0,T="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!s)for(s={};e=pe.exec(r);)s[e[1].toLowerCase()]=e[2];e=s[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?r:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return w||(t=x[n]=x[n]||t,y[t]=e),this},overrideMimeType:function(t){return w||(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(w<2)for(e in t)b[e]=[b[e],t[e]];else C.always(t[C.status]);return this},abort:function(t){var e=t||T;return i&&i.abort(e),E(0,e),this}};if(m.promise(C).complete=v.add,C.success=C.done,C.error=C.fail,d.url=((t||d.url||le.href)+"").replace(fe,"").replace(ge,le.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=g.trim(d.dataType||"*").toLowerCase().match(L)||[""],null==d.crossDomain){u=a.createElement("a");try{u.href=d.url,u.href=u.href,d.crossDomain=ye.protocol+"//"+ye.host!=u.protocol+"//"+u.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=g.param(d.data,d.traditional)),we(me,d,e,C),2===w)return C;for(f in(c=g.event&&d.global)&&0==g.active++&&g.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!he.test(d.type),o=d.url,d.hasContent||(d.data&&(o=d.url+=(ce.test(o)?"&":"?")+d.data,delete d.data),!1===d.cache&&(d.url=de.test(o)?o.replace(de,"$1_="+ue++):o+(ce.test(o)?"&":"?")+"_="+ue++)),d.ifModified&&(g.lastModified[o]&&C.setRequestHeader("If-Modified-Since",g.lastModified[o]),g.etag[o]&&C.setRequestHeader("If-None-Match",g.etag[o])),(d.data&&d.hasContent&&!1!==d.contentType||e.contentType)&&C.setRequestHeader("Content-Type",d.contentType),C.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+be+"; q=0.01":""):d.accepts["*"]),d.headers)C.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(p,C,d)||2===w))return C.abort();for(f in T="abort",{success:1,error:1,complete:1})C[f](d[f]);if(i=we(ve,d,e,C)){if(C.readyState=1,c&&h.trigger("ajaxSend",[C,d]),2===w)return C;d.async&&d.timeout>0&&(l=n.setTimeout(function(){C.abort("timeout")},d.timeout));try{w=1,i.send(y,E)}catch(t){if(!(w<2))throw t;E(-1,t)}}else E(-1,"No Transport");function E(t,e,a,s){var u,f,y,x,T,E=e;2!==w&&(w=2,l&&n.clearTimeout(l),i=void 0,r=s||"",C.readyState=t>0?4:0,u=t>=200&&t<300||304===t,a&&(x=function(t,e,n){for(var i,o,r,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in s)if(s[o]&&s[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}a||(a=o)}r=r||a}if(r)return r!==l[0]&&l.unshift(r),n[r]}(d,C,a)),x=function(t,e,n,i){var o,r,a,s,l,u={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)u[a.toLowerCase()]=t.converters[a];for(r=c.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(a=u[l+" "+r]||u["* "+r]))for(o in u)if((s=o.split(" "))[1]===r&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[o]:!0!==u[o]&&(r=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(d,x,C,u),u?(d.ifModified&&((T=C.getResponseHeader("Last-Modified"))&&(g.lastModified[o]=T),(T=C.getResponseHeader("etag"))&&(g.etag[o]=T)),204===t||"HEAD"===d.type?E="nocontent":304===t?E="notmodified":(E=x.state,f=x.data,u=!(y=x.error))):(y=E,!t&&E||(E="error",t<0&&(t=0))),C.status=t,C.statusText=(e||E)+"",u?m.resolveWith(p,[f,E,C]):m.rejectWith(p,[C,E,y]),C.statusCode(b),b=void 0,c&&h.trigger(u?"ajaxSuccess":"ajaxError",[C,d,u?f:y]),v.fireWith(p,[C,E]),c&&(h.trigger("ajaxComplete",[C,d]),--g.active||g.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,n){return g.get(t,e,n,"json")},getScript:function(t,e){return g.get(t,void 0,e,"script")}}),g.each(["get","post"],function(t,e){g[e]=function(t,n,i,o){return g.isFunction(n)&&(o=o||i,i=n,n=void 0),g.ajax(g.extend({url:t,type:e,dataType:o,data:n,success:i},g.isPlainObject(t)&&t))}}),g._evalUrl=function(t){return g.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},g.fn.extend({wrapAll:function(t){var e;return g.isFunction(t)?this.each(function(e){g(this).wrapAll(t.call(this,e))}):(this[0]&&(e=g(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return g.isFunction(t)?this.each(function(e){g(this).wrapInner(t.call(this,e))}):this.each(function(){var e=g(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=g.isFunction(t);return this.each(function(n){g(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){g.nodeName(this,"body")||g(this).replaceWith(this.childNodes)}).end()}}),g.expr.filters.hidden=function(t){return!g.expr.filters.visible(t)},g.expr.filters.visible=function(t){return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var Ce=/%20/g,Ee=/\[\]$/,ke=/\r?\n/g,Se=/^(?:submit|button|image|reset|file)$/i,Ne=/^(?:input|select|textarea|keygen)/i;function De(t,e,n,i){var o;if(g.isArray(e))g.each(e,function(e,o){n||Ee.test(t)?i(t,o):De(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,i)});else if(n||"object"!==g.type(e))i(t,e);else for(o in e)De(t+"["+o+"]",e[o],n,i)}g.param=function(t,e){var n,i=[],o=function(t,e){e=g.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=g.ajaxSettings&&g.ajaxSettings.traditional),g.isArray(t)||t.jquery&&!g.isPlainObject(t))g.each(t,function(){o(this.name,this.value)});else for(n in t)De(n,t[n],e,o);return i.join("&").replace(Ce,"+")},g.fn.extend({serialize:function(){return g.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=g.prop(this,"elements");return t?g.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!g(this).is(":disabled")&&Ne.test(this.nodeName)&&!Se.test(t)&&(this.checked||!G.test(t))}).map(function(t,e){var n=g(this).val();return null==n?null:g.isArray(n)?g.map(n,function(t){return{name:e.name,value:t.replace(ke,"\r\n")}}):{name:e.name,value:n.replace(ke,"\r\n")}}).get()}}),g.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var $e={0:200,1223:204},Ae=g.ajaxSettings.xhr();h.cors=!!Ae&&"withCredentials"in Ae,h.ajax=Ae=!!Ae,g.ajaxTransport(function(t){var e,i;if(h.cors||Ae&&!t.crossDomain)return{send:function(o,r){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(a,o[a]);e=function(t){return function(){e&&(e=i=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?r(0,"error"):r(s.status,s.statusText):r($e[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),i=s.onerror=e("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout(function(){e&&i()})},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),g.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return g.globalEval(t),t}}}),g.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),g.ajaxTransport("script",function(t){var e,n;if(t.crossDomain)return{send:function(i,o){e=g("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),a.head.appendChild(e[0])},abort:function(){n&&n()}}});var Oe=[],je=/(=)\?(?=&|$)|\?\?/;g.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Oe.pop()||g.expando+"_"+ue++;return this[t]=!0,t}}),g.ajaxPrefilter("json jsonp",function(t,e,i){var o,r,a,s=!1!==t.jsonp&&(je.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&je.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=g.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(je,"$1"+o):!1!==t.jsonp&&(t.url+=(ce.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return a||g.error(o+" was not called"),a[0]},t.dataTypes[0]="json",r=n[o],n[o]=function(){a=arguments},i.always(function(){void 0===r?g(n).removeProp(o):n[o]=r,t[o]&&(t.jsonpCallback=e.jsonpCallback,Oe.push(o)),a&&g.isFunction(r)&&r(a[0]),a=r=void 0}),"script"}),g.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||a;var i=k.exec(t),o=!n&&[];return i?[e.createElement(i[1])]:(i=ot([t],e,o),o&&o.length&&g(o).remove(),g.merge([],i.childNodes))};var Ie=g.fn.load;function Le(t){return g.isWindow(t)?t:9===t.nodeType&&t.defaultView}g.fn.load=function(t,e,n){if("string"!=typeof t&&Ie)return Ie.apply(this,arguments);var i,o,r,a=this,s=t.indexOf(" ");return s>-1&&(i=g.trim(t.slice(s)),t=t.slice(0,s)),g.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),a.length>0&&g.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){r=arguments,a.html(i?g("<div>").append(g.parseHTML(t)).find(i):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,r||[t.responseText,e,t])})}),this},g.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){g.fn[e]=function(t){return this.on(e,t)}}),g.expr.filters.animated=function(t){return g.grep(g.timers,function(e){return t===e.elem}).length},g.offset={setOffset:function(t,e,n){var i,o,r,a,s,l,u=g.css(t,"position"),c=g(t),f={};"static"===u&&(t.style.position="relative"),s=c.offset(),r=g.css(t,"top"),l=g.css(t,"left"),("absolute"===u||"fixed"===u)&&(r+l).indexOf("auto")>-1?(a=(i=c.position()).top,o=i.left):(a=parseFloat(r)||0,o=parseFloat(l)||0),g.isFunction(e)&&(e=e.call(t,n,g.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+o),"using"in e?e.using.call(t,f):c.css(f)}},g.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){g.offset.setOffset(this,t,e)});var e,n,i=this[0],o={top:0,left:0},r=i&&i.ownerDocument;return r?(e=r.documentElement,g.contains(e,i)?(o=i.getBoundingClientRect(),n=Le(r),{top:o.top+n.pageYOffset-e.clientTop,left:o.left+n.pageXOffset-e.clientLeft}):o):void 0},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===g.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),g.nodeName(t[0],"html")||(i=t.offset()),i.top+=g.css(t[0],"borderTopWidth",!0),i.left+=g.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-g.css(n,"marginTop",!0),left:e.left-i.left-g.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===g.css(t,"position");)t=t.offsetParent;return t||Ot})}}),g.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;g.fn[t]=function(i){return _(this,function(t,i,o){var r=Le(t);if(void 0===o)return r?r[e]:t[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):t[i]=o},t,i,arguments.length)}}),g.each(["top","left"],function(t,e){g.cssHooks[e]=It(h.pixelPosition,function(t,n){if(n)return n=jt(t,e),Dt.test(n)?g(t).position()[e]+"px":n})}),g.each({Height:"height",Width:"width"},function(t,e){g.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){g.fn[i]=function(i,o){var r=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===o?"margin":"border");return _(this,function(e,n,i){var o;return g.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?g.css(e,n,a):g.style(e,n,i,a)},e,r?i:void 0,r,null)}})}),g.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},size:function(){return this.length}}),g.fn.andSelf=g.fn.addBack,void 0===(i=function(){return g}.apply(e,[]))||(t.exports=i);var Re=n.jQuery,_e=n.$;return g.noConflict=function(t){return n.$===g&&(n.$=_e),t&&n.jQuery===g&&(n.jQuery=Re),g},o||(n.jQuery=n.$=g),g},"object"==typeof t.exports?t.exports=o.document?r(o,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return r(t)}:r(o)},function(t,e,n){(function(i){var o,r,a;
/*!
 * Knockout JavaScript library v3.5.0
 * (c) The Knockout.js team - http://knockoutjs.com/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */!function(s){var l=this||(0,eval)("this"),u=l.document,c=l.navigator,f=l.jQuery,d=l.JSON;f||void 0===i||(f=i),function(i){r=[e,n],void 0===(a="function"==typeof(o=i)?o.apply(e,r):o)||(t.exports=a)}(function(t,e){function n(t,e){return(null===t||typeof t in w)&&t===e}function i(t,e){var n;return function(){n||(n=x.a.setTimeout(function(){n=s,t()},e))}}function o(t,e){var n;return function(){clearTimeout(n),n=x.a.setTimeout(t,e)}}function r(t,e){e&&"change"!==e?"beforeChange"===e?this.oc(t):this.bb(t,e):this.pc(t)}function a(t,e){null!==e&&e.s&&e.s()}function p(t,e){var n=this.pd,i=n[S];i.qa||(this.Pb&&this.kb[e]?(n.tc(e,t,this.kb[e]),this.kb[e]=null,--this.Pb):i.F[e]||n.tc(e,t,i.G?{da:t}:n.Zc(t)),t.Ka&&t.fd())}var h,g,m,v,b,y,x=void 0!==t?t:{};x.b=function(t,e){for(var n=t.split("."),i=x,o=0;o<n.length-1;o++)i=i[n[o]];i[n[n.length-1]]=e},x.J=function(t,e,n){t[e]=n},x.version="3.5.0",x.b("version",x.version),x.options={deferUpdates:!1,useOnlyNativeEvents:!1,foreachHidesDestroyed:!1},x.a=function(){function t(t,e){for(var n in t)o.call(t,n)&&e(n,t[n])}function e(t,e){if(e)for(var n in e)o.call(e,n)&&(t[n]=e[n]);return t}function n(t,e){return t.__proto__=e,t}function i(t,e,n,i){var o=t[e].match(b)||[];x.a.C(n.match(b),function(t){x.a.Oa(o,t,i)}),t[e]=o.join(" ")}var o=Object.prototype.hasOwnProperty,r={__proto__:[]}instanceof Array,a="function"==typeof Symbol,p={},h={};p[c&&/Firefox\/2/i.test(c.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],p.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" "),t(p,function(t,e){if(e.length)for(var n=0,i=e.length;n<i;n++)h[e[n]]=t});var g,m={propertychange:!0},v=u&&function(){for(var t=3,e=u.createElement("div"),n=e.getElementsByTagName("i");e.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e",n[0];);return 4<t?t:s}(),b=/\S+/g;return{Ic:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],C:function(t,e,n){for(var i=0,o=t.length;i<o;i++)e.call(n,t[i],i,t)},A:"function"==typeof Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e)}:function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},Lb:function(t,e,n){for(var i=0,o=t.length;i<o;i++)if(e.call(n,t[i],i,t))return t[i];return s},hb:function(t,e){var n=x.a.A(t,e);0<n?t.splice(n,1):0===n&&t.shift()},vc:function(t){var e=[];return t&&x.a.C(t,function(t){0>x.a.A(e,t)&&e.push(t)}),e},Mb:function(t,e,n){var i=[];if(t)for(var o=0,r=t.length;o<r;o++)i.push(e.call(n,t[o],o));return i},fb:function(t,e,n){var i=[];if(t)for(var o=0,r=t.length;o<r;o++)e.call(n,t[o],o)&&i.push(t[o]);return i},gb:function(t,e){if(e instanceof Array)t.push.apply(t,e);else for(var n=0,i=e.length;n<i;n++)t.push(e[n]);return t},Oa:function(t,e,n){var i=x.a.A(x.a.$b(t),e);0>i?n&&t.push(e):n||t.splice(i,1)},Ba:r,extend:e,setPrototypeOf:n,zb:r?n:e,O:t,Ha:function(t,e,n){if(!t)return t;var i,r={};for(i in t)o.call(t,i)&&(r[i]=e.call(n,t[i],i,t));return r},Sb:function(t){for(;t.firstChild;)x.removeNode(t.firstChild)},Xb:function(t){for(var e=((t=x.a.la(t))[0]&&t[0].ownerDocument||u).createElement("div"),n=0,i=t.length;n<i;n++)e.appendChild(x.na(t[n]));return e},Ca:function(t,e){for(var n=0,i=t.length,o=[];n<i;n++){var r=t[n].cloneNode(!0);o.push(e?x.na(r):r)}return o},ua:function(t,e){if(x.a.Sb(t),e)for(var n=0,i=e.length;n<i;n++)t.appendChild(e[n])},Wc:function(t,e){var n=t.nodeType?[t]:t;if(0<n.length){for(var i=n[0],o=i.parentNode,r=0,a=e.length;r<a;r++)o.insertBefore(e[r],i);for(r=0,a=n.length;r<a;r++)x.removeNode(n[r])}},Ua:function(t,e){if(t.length){for(e=8===e.nodeType&&e.parentNode||e;t.length&&t[0].parentNode!==e;)t.splice(0,1);for(;1<t.length&&t[t.length-1].parentNode!==e;)t.length--;if(1<t.length){var n=t[0],i=t[t.length-1];for(t.length=0;n!==i;)t.push(n),n=n.nextSibling;t.push(i)}}return t},Yc:function(t,e){7>v?t.setAttribute("selected",e):t.selected=e},Cb:function(t){return null===t||t===s?"":t.trim?t.trim():t.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},Td:function(t,e){return t=t||"",!(e.length>t.length)&&t.substring(0,e.length)===e},ud:function(t,e){if(t===e)return!0;if(11===t.nodeType)return!1;if(e.contains)return e.contains(1!==t.nodeType?t.parentNode:t);if(e.compareDocumentPosition)return 16==(16&e.compareDocumentPosition(t));for(;t&&t!=e;)t=t.parentNode;return!!t},Rb:function(t){return x.a.ud(t,t.ownerDocument.documentElement)},jd:function(t){return!!x.a.Lb(t,x.a.Rb)},P:function(t){return t&&t.tagName&&t.tagName.toLowerCase()},zc:function(t){return x.onError?function(){try{return t.apply(this,arguments)}catch(t){throw x.onError&&x.onError(t),t}}:t},setTimeout:function(t,e){return setTimeout(x.a.zc(t),e)},Fc:function(t){setTimeout(function(){throw x.onError&&x.onError(t),t},0)},H:function(t,e,n){var i=x.a.zc(n);if(n=m[e],x.options.useOnlyNativeEvents||n||!f)if(n||"function"!=typeof t.addEventListener){if(void 0===t.attachEvent)throw Error("Browser doesn't support addEventListener or attachEvent");var o=function(e){i.call(t,e)},r="on"+e;t.attachEvent(r,o),x.a.I.za(t,function(){t.detachEvent(r,o)})}else t.addEventListener(e,i,!1);else g||(g="function"==typeof f(t).on?"on":"bind"),f(t)[g](e,i)},Fb:function(t,e){if(!t||!t.nodeType)throw Error("element must be a DOM node when calling triggerEvent");var n;if(n=!("input"!==x.a.P(t)||!t.type||"click"!=e.toLowerCase())&&("checkbox"==(n=t.type)||"radio"==n),x.options.useOnlyNativeEvents||!f||n)if("function"==typeof u.createEvent){if("function"!=typeof t.dispatchEvent)throw Error("The supplied element doesn't support dispatchEvent");(n=u.createEvent(h[e]||"HTMLEvents")).initEvent(e,!0,!0,l,0,0,0,0,0,!1,!1,!1,!1,0,t),t.dispatchEvent(n)}else if(n&&t.click)t.click();else{if(void 0===t.fireEvent)throw Error("Browser doesn't support triggering events");t.fireEvent("on"+e)}else f(t).trigger(e)},c:function(t){return x.N(t)?t():t},$b:function(t){return x.N(t)?t.w():t},Eb:function(t,e,n){var o;e&&("object"==typeof t.classList?(o=t.classList[n?"add":"remove"],x.a.C(e.match(b),function(e){o.call(t.classList,e)})):"string"==typeof t.className.baseVal?i(t.className,"baseVal",e,n):i(t,"className",e,n))},Ab:function(t,e){var n=x.a.c(e);null!==n&&n!==s||(n="");var i=x.h.firstChild(t);!i||3!=i.nodeType||x.h.nextSibling(i)?x.h.ua(t,[t.ownerDocument.createTextNode(n)]):i.data=n,x.a.zd(t)},Xc:function(t,e){if(t.name=e,7>=v)try{var n=t.name.replace(/[&<>'"]/g,function(t){return"&#"+t.charCodeAt(0)+";"});t.mergeAttributes(u.createElement("<input name='"+n+"'/>"),!1)}catch(t){}},zd:function(t){9<=v&&(t=1==t.nodeType?t:t.parentNode).style&&(t.style.zoom=t.style.zoom)},vd:function(t){if(v){var e=t.style.width;t.style.width=0,t.style.width=e}},Od:function(t,e){t=x.a.c(t),e=x.a.c(e);for(var n=[],i=t;i<=e;i++)n.push(i);return n},la:function(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e},Da:function(t){return a?Symbol(t):t},Xd:6===v,Yd:7===v,W:v,Kc:function(t,e){for(var n=x.a.la(t.getElementsByTagName("input")).concat(x.a.la(t.getElementsByTagName("textarea"))),i="string"==typeof e?function(t){return t.name===e}:function(t){return e.test(t.name)},o=[],r=n.length-1;0<=r;r--)i(n[r])&&o.push(n[r]);return o},Md:function(t){return"string"==typeof t&&(t=x.a.Cb(t))?d&&d.parse?d.parse(t):new Function("return "+t)():null},fc:function(t,e,n){if(!d||!d.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return d.stringify(x.a.c(t),e,n)},Nd:function(e,n,i){var o=(i=i||{}).params||{},r=i.includeFields||this.Ic,a=e;if("object"==typeof e&&"form"===x.a.P(e)){a=e.action;for(var s=r.length-1;0<=s;s--)for(var l=x.a.Kc(e,r[s]),c=l.length-1;0<=c;c--)o[l[c].name]=l[c].value}n=x.a.c(n);var f=u.createElement("form");for(var d in f.style.display="none",f.action=a,f.method="post",n)(e=u.createElement("input")).type="hidden",e.name=d,e.value=x.a.fc(x.a.c(n[d])),f.appendChild(e);t(o,function(t,e){var n=u.createElement("input");n.type="hidden",n.name=t,n.value=e,f.appendChild(n)}),u.body.appendChild(f),i.submitter?i.submitter(f):f.submit(),setTimeout(function(){f.parentNode.removeChild(f)},0)}}}(),x.b("utils",x.a),x.b("utils.arrayForEach",x.a.C),x.b("utils.arrayFirst",x.a.Lb),x.b("utils.arrayFilter",x.a.fb),x.b("utils.arrayGetDistinctValues",x.a.vc),x.b("utils.arrayIndexOf",x.a.A),x.b("utils.arrayMap",x.a.Mb),x.b("utils.arrayPushAll",x.a.gb),x.b("utils.arrayRemoveItem",x.a.hb),x.b("utils.cloneNodes",x.a.Ca),x.b("utils.createSymbolOrString",x.a.Da),x.b("utils.extend",x.a.extend),x.b("utils.fieldsIncludedWithJsonPost",x.a.Ic),x.b("utils.getFormFields",x.a.Kc),x.b("utils.objectMap",x.a.Ha),x.b("utils.peekObservable",x.a.$b),x.b("utils.postJson",x.a.Nd),x.b("utils.parseJson",x.a.Md),x.b("utils.registerEventHandler",x.a.H),x.b("utils.stringifyJson",x.a.fc),x.b("utils.range",x.a.Od),x.b("utils.toggleDomNodeCssClass",x.a.Eb),x.b("utils.triggerEvent",x.a.Fb),x.b("utils.unwrapObservable",x.a.c),x.b("utils.objectForEach",x.a.O),x.b("utils.addOrRemoveItem",x.a.Oa),x.b("utils.setTextContent",x.a.Ab),x.b("unwrap",x.a.c),Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if(1===arguments.length)return function(){return e.apply(t,arguments)};var n=Array.prototype.slice.call(arguments,1);return function(){var i=n.slice(0);return i.push.apply(i,arguments),e.apply(t,i)}}),x.a.g=new function(){var t,e,n=0,i="__ko__"+(new Date).getTime(),o={};return x.a.W?(t=function(t,e){var r=t[i];if(!r||"null"===r||!o[r]){if(!e)return s;r=t[i]="ko"+n++,o[r]={}}return o[r]},e=function(t){var e=t[i];return!!e&&(delete o[e],t[i]=null,!0)}):(t=function(t,e){var n=t[i];return!n&&e&&(n=t[i]={}),n},e=function(t){return!!t[i]&&(delete t[i],!0)}),{get:function(e,n){var i=t(e,!1);return i&&i[n]},set:function(e,n,i){(e=t(e,i!==s))&&(e[n]=i)},Tb:function(e,n,i){return(e=t(e,!0))[n]||(e[n]=i)},clear:e,Z:function(){return n+++i}}},x.b("utils.domData",x.a.g),x.b("utils.domData.clear",x.a.g.clear),x.a.I=new function(){function t(t,e){var n=x.a.g.get(t,i);return n===s&&e&&(n=[],x.a.g.set(t,i,n)),n}function e(e){if(i=t(e,!1))for(var i=i.slice(0),o=0;o<i.length;o++)i[o](e);x.a.g.clear(e),x.a.I.cleanExternalData(e),r[e.nodeType]&&n(e.childNodes,!0)}function n(t,n){for(var i,o=[],r=0;r<t.length;r++)if((!n||8===t[r].nodeType)&&(e(o[o.length]=i=t[r]),t[r]!==i))for(;r--&&-1==x.a.A(o,t[r]););}var i=x.a.g.Z(),o={1:!0,8:!0,9:!0},r={1:!0,9:!0};return{za:function(e,n){if("function"!=typeof n)throw Error("Callback must be a function");t(e,!0).push(n)},xb:function(e,n){var o=t(e,!1);o&&(x.a.hb(o,n),0==o.length&&x.a.g.set(e,i,s))},na:function(t){return o[t.nodeType]&&(e(t),r[t.nodeType]&&n(t.getElementsByTagName("*"))),t},removeNode:function(t){x.na(t),t.parentNode&&t.parentNode.removeChild(t)},cleanExternalData:function(t){f&&"function"==typeof f.cleanData&&f.cleanData([t])}}},x.na=x.a.I.na,x.removeNode=x.a.I.removeNode,x.b("cleanNode",x.na),x.b("removeNode",x.removeNode),x.b("utils.domNodeDisposal",x.a.I),x.b("utils.domNodeDisposal.addDisposeCallback",x.a.I.za),x.b("utils.domNodeDisposal.removeDisposeCallback",x.a.I.xb),h=[0,"",""],b={thead:g=[1,"<table>","</table>"],tbody:g,tfoot:g,tr:[2,"<table><tbody>","</tbody></table>"],td:m=[3,"<table><tbody><tr>","</tr></tbody></table>"],th:m,option:v=[1,"<select multiple='multiple'>","</select>"],optgroup:v},y=8>=x.a.W,x.a.ta=function(t,e){var n;if(f){if(f.parseHTML)n=f.parseHTML(t,e)||[];else if((n=f.clean([t],e))&&n[0]){for(var i=n[0];i.parentNode&&11!==i.parentNode.nodeType;)i=i.parentNode;i.parentNode&&i.parentNode.removeChild(i)}}else{(n=e)||(n=u),i=n.parentWindow||n.defaultView||l;var o,r=x.a.Cb(t).toLowerCase(),a=n.createElement("div");for(o=(r=r.match(/^(?:\x3c!--.*?--\x3e\s*?)*?<([a-z]+)[\s>]/))&&b[r[1]]||h,r=o[0],o="ignored<div>"+o[1]+t+o[2]+"</div>","function"==typeof i.innerShiv?a.appendChild(i.innerShiv(o)):(y&&n.body.appendChild(a),a.innerHTML=o,y&&a.parentNode.removeChild(a));r--;)a=a.lastChild;n=x.a.la(a.lastChild.childNodes)}return n},x.a.Ld=function(t,e){var n=x.a.ta(t,e);return n.length&&n[0].parentElement||x.a.Xb(n)},x.a.dc=function(t,e){if(x.a.Sb(t),null!==(e=x.a.c(e))&&e!==s)if("string"!=typeof e&&(e=e.toString()),f)f(t).html(e);else for(var n=x.a.ta(e,t.ownerDocument),i=0;i<n.length;i++)t.appendChild(n[i])},x.b("utils.parseHtmlFragment",x.a.ta),x.b("utils.setHtml",x.a.dc),x.aa=function(){var t={};return{Wb:function(e){if("function"!=typeof e)throw Error("You can only pass a function to ko.memoization.memoize()");var n=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);return t[n]=e,"\x3c!--[ko_memo:"+n+"]--\x3e"},ad:function(e,n){var i=t[e];if(i===s)throw Error("Couldn't find any memo with ID "+e+". Perhaps it's already been unmemoized.");try{return i.apply(null,n||[]),!0}finally{delete t[e]}},bd:function(t,e){var n=[];!function t(e,n){if(e)if(8==e.nodeType)null!=(i=x.aa.Tc(e.nodeValue))&&n.push({sd:e,Jd:i});else if(1==e.nodeType)for(var i=0,o=e.childNodes,r=o.length;i<r;i++)t(o[i],n)}(t,n);for(var i=0,o=n.length;i<o;i++){var r=n[i].sd,a=[r];e&&x.a.gb(a,e),x.aa.ad(n[i].Jd,a),r.nodeValue="",r.parentNode&&r.parentNode.removeChild(r)}},Tc:function(t){return(t=t.match(/^\[ko_memo\:(.*?)\]$/))?t[1]:null}}}(),x.b("memoization",x.aa),x.b("memoization.memoize",x.aa.Wb),x.b("memoization.unmemoize",x.aa.ad),x.b("memoization.parseMemoText",x.aa.Tc),x.b("memoization.unmemoizeDomNodeAndDescendants",x.aa.bd),x.ma=function(){function t(){if(i)for(var t,e=i,o=0;r<i;)if(t=n[r++]){if(r>e){if(5e3<=++o){r=i,x.a.Fc(Error("'Too much recursion' after processing "+o+" task groups."));break}e=i}try{t()}catch(t){x.a.Fc(t)}}}function e(){t(),r=i=n.length=0}var n=[],i=0,o=1,r=0;return{scheduler:l.MutationObserver?function(t){var e=u.createElement("div");return new MutationObserver(t).observe(e,{attributes:!0}),function(){e.classList.toggle("foo")}}(e):u&&"onreadystatechange"in u.createElement("script")?function(t){var e=u.createElement("script");e.onreadystatechange=function(){e.onreadystatechange=null,u.documentElement.removeChild(e),e=null,t()},u.documentElement.appendChild(e)}:function(t){setTimeout(t,0)},yb:function(t){return i||x.ma.scheduler(e),n[i++]=t,o++},cancel:function(t){(t-=o-i)>=r&&t<i&&(n[t]=null)},resetForTesting:function(){var t=i-r;return r=i=n.length=0,t},Rd:t}}(),x.b("tasks",x.ma),x.b("tasks.schedule",x.ma.yb),x.b("tasks.runEarly",x.ma.Rd),x.Ta={throttle:function(t,e){t.throttleEvaluation=e;var n=null;return x.$({read:t,write:function(i){clearTimeout(n),n=x.a.setTimeout(function(){t(i)},e)}})},rateLimit:function(t,e){var n,r,a;"number"==typeof e?n=e:(n=e.timeout,r=e.method),t.Hb=!1,a="function"==typeof r?r:"notifyWhenChangesStop"==r?o:i,t.tb(function(t){return a(t,n,e)})},deferred:function(t,e){if(!0!==e)throw Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");t.Hb||(t.Hb=!0,t.tb(function(e){var n,i=!1;return function(){if(!i){x.ma.cancel(n),n=x.ma.yb(e);try{i=!0,t.notifySubscribers(s,"dirty")}finally{i=!1}}}}))},notify:function(t,e){t.equalityComparer="always"==e?null:n}};var w={undefined:1,boolean:1,number:1,string:1};x.b("extenders",x.Ta),x.gc=function(t,e,n){this.da=t,this.kc=e,this.lc=n,this.Ib=!1,this.ab=this.Jb=null,x.J(this,"dispose",this.s),x.J(this,"disposeWhenNodeIsRemoved",this.l)},x.gc.prototype.s=function(){this.Ib||(this.ab&&x.a.I.xb(this.Jb,this.ab),this.Ib=!0,this.lc(),this.da=this.kc=this.lc=this.Jb=this.ab=null)},x.gc.prototype.l=function(t){this.Jb=t,x.a.I.za(t,this.ab=this.s.bind(this))},x.R=function(){x.a.zb(this,T),T.ob(this)};var T={ob:function(t){t.S={change:[]},t.rc=1},subscribe:function(t,e,n){var i=this;n=n||"change";var o=new x.gc(i,e?t.bind(e):t,function(){x.a.hb(i.S[n],o),i.cb&&i.cb(n)});return i.Qa&&i.Qa(n),i.S[n]||(i.S[n]=[]),i.S[n].push(o),o},notifySubscribers:function(t,e){if("change"===(e=e||"change")&&this.Gb(),this.Wa(e)){var n="change"===e&&this.dd||this.S[e].slice(0);try{x.v.wc();for(var i,o=0;i=n[o];++o)i.Ib||i.kc(t)}finally{x.v.end()}}},mb:function(){return this.rc},Cd:function(t){return this.mb()!==t},Gb:function(){++this.rc},tb:function(t){var e,n,i,o,a,s=this,l=x.N(s);s.bb||(s.bb=s.notifySubscribers,s.notifySubscribers=r);var u=t(function(){s.Ka=!1,l&&o===s&&(o=s.mc?s.mc():s());var t=n||a&&s.qb(i,o);a=n=e=!1,t&&s.bb(i=o)});s.pc=function(t,n){n&&s.Ka||(a=!n),s.dd=s.S.change.slice(0),s.Ka=e=!0,o=t,u()},s.oc=function(t){e||(i=t,s.bb(t,"beforeChange"))},s.qc=function(){a=!0},s.fd=function(){s.qb(i,s.w(!0))&&(n=!0)}},Wa:function(t){return this.S[t]&&this.S[t].length},Ad:function(t){if(t)return this.S[t]&&this.S[t].length||0;var e=0;return x.a.O(this.S,function(t,n){"dirty"!==t&&(e+=n.length)}),e},qb:function(t,e){return!this.equalityComparer||!this.equalityComparer(t,e)},toString:function(){return"[object Object]"},extend:function(t){var e=this;return t&&x.a.O(t,function(t,n){var i=x.Ta[t];"function"==typeof i&&(e=i(e,n)||e)}),e}};x.J(T,"init",T.ob),x.J(T,"subscribe",T.subscribe),x.J(T,"extend",T.extend),x.J(T,"getSubscriptionsCount",T.Ad),x.a.Ba&&x.a.setPrototypeOf(T,Function.prototype),x.R.fn=T,x.Pc=function(t){return null!=t&&"function"==typeof t.subscribe&&"function"==typeof t.notifySubscribers},x.b("subscribable",x.R),x.b("isSubscribable",x.Pc),x.U=x.v=function(){function t(t){i.push(n),n=t}function e(){n=i.pop()}var n,i=[],o=0;return{wc:t,end:e,ac:function(t){if(n){if(!x.Pc(t))throw Error("Only subscribable things can act as dependencies");n.nd.call(n.od,t,t.ed||(t.ed=++o))}},K:function(n,i,o){try{return t(),n.apply(i,o||[])}finally{e()}},pa:function(){if(n)return n.o.pa()},Va:function(){if(n)return n.o.Va()},rb:function(){if(n)return n.rb},o:function(){if(n)return n.o}}}(),x.b("computedContext",x.U),x.b("computedContext.getDependenciesCount",x.U.pa),x.b("computedContext.getDependencies",x.U.Va),x.b("computedContext.isInitial",x.U.rb),x.b("computedContext.registerDependency",x.U.ac),x.b("ignoreDependencies",x.Wd=x.v.K);var C=x.a.Da("_latestValue");x.sa=function(t){function e(){return 0<arguments.length?(e.qb(e[C],arguments[0])&&(e.xa(),e[C]=arguments[0],e.wa()),this):(x.v.ac(e),e[C])}return e[C]=t,x.a.Ba||x.a.extend(e,x.R.fn),x.R.fn.ob(e),x.a.zb(e,E),x.options.deferUpdates&&x.Ta.deferred(e,!0),e};var E={equalityComparer:n,w:function(){return this[C]},wa:function(){this.notifySubscribers(this[C],"spectate"),this.notifySubscribers(this[C])},xa:function(){this.notifySubscribers(this[C],"beforeChange")}};x.a.Ba&&x.a.setPrototypeOf(E,x.R.fn);var k=x.sa.Na="__ko_proto__";E[k]=x.sa,x.N=function(t){if((t="function"==typeof t&&t[k])&&t!==E[k]&&t!==x.o.fn[k])throw Error("Invalid object that looks like an observable; possibly from another Knockout instance");return!!t},x.Ya=function(t){return"function"==typeof t&&(t[k]===E[k]||t[k]===x.o.fn[k]&&t.Mc)},x.b("observable",x.sa),x.b("isObservable",x.N),x.b("isWriteableObservable",x.Ya),x.b("isWritableObservable",x.Ya),x.b("observable.fn",E),x.J(E,"peek",E.w),x.J(E,"valueHasMutated",E.wa),x.J(E,"valueWillMutate",E.xa),x.Ia=function(t){if("object"!=typeof(t=t||[])||!("length"in t))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");return t=x.sa(t),x.a.zb(t,x.Ia.fn),t.extend({trackArrayChanges:!0})},x.Ia.fn={remove:function(t){for(var e=this.w(),n=[],i="function"!=typeof t||x.N(t)?function(e){return e===t}:t,o=0;o<e.length;o++){var r=e[o];if(i(r)){if(0===n.length&&this.xa(),e[o]!==r)throw Error("Array modified during remove; cannot remove item");n.push(r),e.splice(o,1),o--}}return n.length&&this.wa(),n},removeAll:function(t){if(t===s){var e=this.w(),n=e.slice(0);return this.xa(),e.splice(0,e.length),this.wa(),n}return t?this.remove(function(e){return 0<=x.a.A(t,e)}):[]},destroy:function(t){var e=this.w(),n="function"!=typeof t||x.N(t)?function(e){return e===t}:t;this.xa();for(var i=e.length-1;0<=i;i--){var o=e[i];n(o)&&(o._destroy=!0)}this.wa()},destroyAll:function(t){return t===s?this.destroy(function(){return!0}):t?this.destroy(function(e){return 0<=x.a.A(t,e)}):[]},indexOf:function(t){var e=this();return x.a.A(e,t)},replace:function(t,e){var n=this.indexOf(t);0<=n&&(this.xa(),this.w()[n]=e,this.wa())},sorted:function(t){var e=this().slice(0);return t?e.sort(t):e.sort()},reversed:function(){return this().slice(0).reverse()}},x.a.Ba&&x.a.setPrototypeOf(x.Ia.fn,x.sa.fn),x.a.C("pop push reverse shift sort splice unshift".split(" "),function(t){x.Ia.fn[t]=function(){var e=this.w();this.xa(),this.yc(e,t,arguments);var n=e[t].apply(e,arguments);return this.wa(),n===e?this:n}}),x.a.C(["slice"],function(t){x.Ia.fn[t]=function(){var e=this();return e[t].apply(e,arguments)}}),x.Oc=function(t){return x.N(t)&&"function"==typeof t.remove&&"function"==typeof t.push},x.b("observableArray",x.Ia),x.b("isObservableArray",x.Oc),x.Ta.trackArrayChanges=function(t,e){function n(){function e(){if(u){var e,n=[].concat(t.w()||[]);t.Wa("arrayChange")&&((!l||1<u)&&(l=x.a.Ob(o,n,t.Nb)),e=l),o=n,l=null,u=0,e&&e.length&&t.notifySubscribers(e,"arrayChange")}}a?e():(a=!0,r=t.notifySubscribers,t.notifySubscribers=function(t,e){return e&&"change"!==e||++u,r.apply(this,arguments)},o=[].concat(t.w()||[]),l=null,i=t.subscribe(e))}if(t.Nb={},e&&"object"==typeof e&&x.a.extend(t.Nb,e),t.Nb.sparse=!0,!t.yc){var i,o,r,a=!1,l=null,u=0,c=t.Qa,f=t.cb;t.Qa=function(e){c&&c.call(t,e),"arrayChange"===e&&n()},t.cb=function(e){f&&f.call(t,e),"arrayChange"!==e||t.Wa("arrayChange")||(r&&(t.notifySubscribers=r,r=s),i&&i.s(),i=null,a=!1,o=s)},t.yc=function(t,e,n){function i(t,e,n){return o[o.length]={status:t,value:e,index:n}}if(a&&!u){var o=[],r=t.length,s=n.length,c=0;switch(e){case"push":c=r;case"unshift":for(e=0;e<s;e++)i("added",n[e],c+e);break;case"pop":c=r-1;case"shift":r&&i("deleted",t[c],c);break;case"splice":e=Math.min(Math.max(0,0>n[0]?r+n[0]:n[0]),r),r=1===s?r:Math.min(e+(n[1]||0),r),s=e+s-2,c=Math.max(r,s);for(var f=[],d=[],p=2;e<c;++e,++p)e<r&&d.push(i("deleted",t[e],e)),e<s&&f.push(i("added",n[p],e));x.a.Jc(d,f);break;default:return}l=o}}}};var S=x.a.Da("_state");x.o=x.$=function(t,e,n){function i(){if(0<arguments.length){if("function"!=typeof o)throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return o.apply(r.lb,arguments),this}return r.qa||x.v.ac(i),(r.ka||r.G&&i.Xa())&&i.ha(),r.X}if("object"==typeof t?n=t:(n=n||{},t&&(n.read=t)),"function"!=typeof n.read)throw Error("Pass a function that returns the value of the ko.computed");var o=n.write,r={X:s,ra:!0,ka:!0,pb:!1,hc:!1,qa:!1,vb:!1,G:!1,Vc:n.read,lb:e||n.owner,l:n.disposeWhenNodeIsRemoved||n.l||null,Sa:n.disposeWhen||n.Sa,Qb:null,F:{},V:0,Hc:null};return i[S]=r,i.Mc="function"==typeof o,x.a.Ba||x.a.extend(i,x.R.fn),x.R.fn.ob(i),x.a.zb(i,N),n.pure?(r.vb=!0,r.G=!0,x.a.extend(i,D)):n.deferEvaluation&&x.a.extend(i,$),x.options.deferUpdates&&x.Ta.deferred(i,!0),r.l&&(r.hc=!0,r.l.nodeType||(r.l=null)),r.G||n.deferEvaluation||i.ha(),r.l&&i.ja()&&x.a.I.za(r.l,r.Qb=function(){i.s()}),i};var N={equalityComparer:n,pa:function(){return this[S].V},Va:function(){var t=[];return x.a.O(this[S].F,function(e,n){t[n.La]=n.da}),t},Ub:function(t){if(!this[S].V)return!1;var e=this.Va();return-1!==x.a.A(e,t)||!!x.a.Lb(e,function(e){return e.Ub&&e.Ub(t)})},tc:function(t,e,n){if(this[S].vb&&e===this)throw Error("A 'pure' computed must not be called recursively");this[S].F[t]=n,n.La=this[S].V++,n.Ma=e.mb()},Xa:function(){var t,e,n=this[S].F;for(t in n)if(Object.prototype.hasOwnProperty.call(n,t)&&(e=n[t],this.Ja&&e.da.Ka||e.da.Cd(e.Ma)))return!0},Id:function(){this.Ja&&!this[S].pb&&this.Ja(!1)},ja:function(){var t=this[S];return t.ka||0<t.V},Qd:function(){this.Ka?this[S].ka&&(this[S].ra=!0):this.Gc()},Zc:function(t){if(t.Hb){var e=t.subscribe(this.Id,this,"dirty"),n=t.subscribe(this.Qd,this);return{da:t,s:function(){e.s(),n.s()}}}return t.subscribe(this.Gc,this)},Gc:function(){var t=this,e=t.throttleEvaluation;e&&0<=e?(clearTimeout(this[S].Hc),this[S].Hc=x.a.setTimeout(function(){t.ha(!0)},e)):t.Ja?t.Ja(!0):t.ha(!0)},ha:function(t){var e=this[S],n=e.Sa,i=!1;if(!e.pb&&!e.qa){if(e.l&&!x.a.Rb(e.l)||n&&n()){if(!e.hc)return void this.s()}else e.hc=!1;e.pb=!0;try{i=this.yd(t)}finally{e.pb=!1}return i}},yd:function(t){var e=this[S],n=!1,i=e.vb?s:!e.V;n={pd:this,kb:e.F,Pb:e.V},x.v.wc({od:n,nd:p,o:this,rb:i}),e.F={},e.V=0;var o=this.xd(e,n);return e.V?n=this.qb(e.X,o):(this.s(),n=!0),n&&(e.G?this.Gb():this.notifySubscribers(e.X,"beforeChange"),e.X=o,this.notifySubscribers(e.X,"spectate"),!e.G&&t&&this.notifySubscribers(e.X),this.qc&&this.qc()),i&&this.notifySubscribers(e.X,"awake"),n},xd:function(t,e){try{var n=t.Vc;return t.lb?n.call(t.lb):n()}finally{x.v.end(),e.Pb&&!t.G&&x.a.O(e.kb,a),t.ra=t.ka=!1}},w:function(t){var e=this[S];return(e.ka&&(t||!e.V)||e.G&&this.Xa())&&this.ha(),e.X},tb:function(t){x.R.fn.tb.call(this,t),this.mc=function(){return this[S].G||(this[S].ra?this.ha():this[S].ka=!1),this[S].X},this.Ja=function(t){this.oc(this[S].X),this[S].ka=!0,t&&(this[S].ra=!0),this.pc(this,!t)}},s:function(){var t=this[S];!t.G&&t.F&&x.a.O(t.F,function(t,e){e.s&&e.s()}),t.l&&t.Qb&&x.a.I.xb(t.l,t.Qb),t.F=s,t.V=0,t.qa=!0,t.ra=!1,t.ka=!1,t.G=!1,t.l=s,t.Sa=s,t.Vc=s,this.Mc||(t.lb=s)}},D={Qa:function(t){var e=this,n=e[S];if(!n.qa&&n.G&&"change"==t){if(n.G=!1,n.ra||e.Xa())n.F=null,n.V=0,e.ha()&&e.Gb();else{var i=[];x.a.O(n.F,function(t,e){i[e.La]=t}),x.a.C(i,function(t,i){var o=n.F[t],r=e.Zc(o.da);r.La=i,r.Ma=o.Ma,n.F[t]=r}),e.Xa()&&e.ha()&&e.Gb()}n.qa||e.notifySubscribers(n.X,"awake")}},cb:function(t){var e=this[S];e.qa||"change"!=t||this.Wa("change")||(x.a.O(e.F,function(t,n){n.s&&(e.F[t]={da:n.da,La:n.La,Ma:n.Ma},n.s())}),e.G=!0,this.notifySubscribers(s,"asleep"))},mb:function(){var t=this[S];return t.G&&(t.ra||this.Xa())&&this.ha(),x.R.fn.mb.call(this)}},$={Qa:function(t){"change"!=t&&"beforeChange"!=t||this.w()}};x.a.Ba&&x.a.setPrototypeOf(N,x.R.fn);var A=x.sa.Na;N[A]=x.o,x.Nc=function(t){return"function"==typeof t&&t[A]===N[A]},x.Ed=function(t){return x.Nc(t)&&t[S]&&t[S].vb},x.b("computed",x.o),x.b("dependentObservable",x.o),x.b("isComputed",x.Nc),x.b("isPureComputed",x.Ed),x.b("computed.fn",N),x.J(N,"peek",N.w),x.J(N,"dispose",N.s),x.J(N,"isActive",N.ja),x.J(N,"getDependenciesCount",N.pa),x.J(N,"getDependencies",N.Va),x.wb=function(t,e){return"function"==typeof t?x.o(t,e,{pure:!0}):((t=x.a.extend({},t)).pure=!0,x.o(t,e))},x.b("pureComputed",x.wb),function(){function t(n,i,o){if(o=o||new e,"object"!=typeof(n=i(n))||null===n||n===s||n instanceof RegExp||n instanceof Date||n instanceof String||n instanceof Number||n instanceof Boolean)return n;var r=n instanceof Array?[]:{};return o.save(n,r),function(t,e){if(t instanceof Array){for(var n=0;n<t.length;n++)e(n);"function"==typeof t.toJSON&&e("toJSON")}else for(n in t)e(n)}(n,function(e){var a=i(n[e]);switch(typeof a){case"boolean":case"number":case"string":case"function":r[e]=a;break;case"object":case"undefined":var l=o.get(a);r[e]=l!==s?l:t(a,i,o)}}),r}function e(){this.keys=[],this.values=[]}x.$c=function(e){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return t(e,function(t){for(var e=0;x.N(t)&&10>e;e++)t=t();return t})},x.toJSON=function(t,e,n){return t=x.$c(t),x.a.fc(t,e,n)},e.prototype={constructor:e,save:function(t,e){var n=x.a.A(this.keys,t);0<=n?this.values[n]=e:(this.keys.push(t),this.values.push(e))},get:function(t){return 0<=(t=x.a.A(this.keys,t))?this.values[t]:s}}}(),x.b("toJS",x.$c),x.b("toJSON",x.toJSON),x.Vd=function(t,e,n){function i(e){var i=x.wb(t,n).extend({Ga:"always"}),o=i.subscribe(function(t){t&&(o.s(),e(t))});return i.notifySubscribers(i.w()),o}return"function"!=typeof Promise||e?i(e.bind(n)):new Promise(i)},x.b("when",x.Vd),x.u={L:function(t){switch(x.a.P(t)){case"option":return!0===t.__ko__hasDomDataOptionValue__?x.a.g.get(t,x.f.options.Yb):7>=x.a.W?t.getAttributeNode("value")&&t.getAttributeNode("value").specified?t.value:t.text:t.value;case"select":return 0<=t.selectedIndex?x.u.L(t.options[t.selectedIndex]):s;default:return t.value}},ya:function(t,e,n){switch(x.a.P(t)){case"option":"string"==typeof e?(x.a.g.set(t,x.f.options.Yb,s),"__ko__hasDomDataOptionValue__"in t&&delete t.__ko__hasDomDataOptionValue__,t.value=e):(x.a.g.set(t,x.f.options.Yb,e),t.__ko__hasDomDataOptionValue__=!0,t.value="number"==typeof e?e:"");break;case"select":""!==e&&null!==e||(e=s);for(var i,o=-1,r=0,a=t.options.length;r<a;++r)if((i=x.u.L(t.options[r]))==e||""===i&&e===s){o=r;break}(n||0<=o||e===s&&1<t.size)&&(t.selectedIndex=o,6===x.a.W&&x.a.setTimeout(function(){t.selectedIndex=o},0));break;default:null!==e&&e!==s||(e=""),t.value=e}}},x.b("selectExtensions",x.u),x.b("selectExtensions.readValue",x.u.L),x.b("selectExtensions.writeValue",x.u.ya),x.m=function(){function t(t){123===(t=x.a.Cb(t)).charCodeAt(0)&&(t=t.slice(1,-1));var e,n=[],a=(t+="\n,").match(i),s=[],l=0;if(1<a.length){for(var u,c=0;u=a[c];++c){var f=u.charCodeAt(0);if(44===f){if(0>=l){n.push(e&&s.length?{key:e,value:s.join("")}:{unknown:e||s.join("")}),e=l=0,s=[];continue}}else if(58===f){if(!l&&!e&&1===s.length){e=s.pop();continue}}else{if(47===f&&1<u.length&&(47===u.charCodeAt(1)||42===u.charCodeAt(1)))continue;47===f&&c&&1<u.length?(f=a[c-1].match(o))&&!r[f[0]]&&(a=(t=t.substr(t.indexOf(u)+1)).match(i),c=-1,u="/"):40===f||123===f||91===f?++l:41===f||125===f||93===f?--l:e||s.length||34!==f&&39!==f||(u=u.slice(1,-1))}s.push(u)}if(0<l)throw Error("Unbalanced parentheses, braces, or brackets")}return n}var e=["true","false","null","undefined"],n=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,i=RegExp("\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|`(?:\\\\.|[^`])*`|/\\*(?:[^*]|\\*+[^*/])*\\*+/|//.*\n|/(?:\\\\.|[^/])+/w*|[^\\s:,/][^,\"'`{}()/:[\\]]*[^\\s,\"'`{}()/:[\\]]|[^\\s]","g"),o=/[\])"'A-Za-z0-9_$]+$/,r={in:1,return:1,typeof:1},a={};return{Ra:[],va:a,Zb:t,ub:function(i,o){function r(t,i){var o;if(!c){var f=x.getBindingHandler(t);if(f&&f.preprocess&&!(i=f.preprocess(i,t,r)))return;(f=a[t])&&(o=i,0<=x.a.A(e,o)?o=!1:(f=o.match(n),o=null!==f&&(f[1]?"Object("+f[1]+")"+f[2]:o)),f=o),f&&l.push("'"+("string"==typeof a[t]?a[t]:t)+"':function(_z){"+o+"=_z}")}u&&(i="function(){return "+i+" }"),s.push("'"+t+"':"+i)}var s=[],l=[],u=(o=o||{}).valueAccessors,c=o.bindingParams,f="string"==typeof i?t(i):i;return x.a.C(f,function(t){r(t.key||t.unknown,t.value)}),l.length&&r("_ko_property_writers","{"+l.join(",")+" }"),s.join(",")},Hd:function(t,e){for(var n=0;n<t.length;n++)if(t[n].key==e)return!0;return!1},$a:function(t,e,n,i,o){t&&x.N(t)?!x.Ya(t)||o&&t.w()===i||t(i):(t=e.get("_ko_property_writers"))&&t[n]&&t[n](i)}}}(),x.b("expressionRewriting",x.m),x.b("expressionRewriting.bindingRewriteValidators",x.m.Ra),x.b("expressionRewriting.parseObjectLiteral",x.m.Zb),x.b("expressionRewriting.preProcessBindings",x.m.ub),x.b("expressionRewriting._twoWayBindings",x.m.va),x.b("jsonExpressionRewriting",x.m),x.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",x.m.ub),function(){function t(t){return 8==t.nodeType&&r.test(o?t.text:t.nodeValue)}function e(t){return 8==t.nodeType&&a.test(o?t.text:t.nodeValue)}function n(n,i){for(var o=n,r=1,a=[];o=o.nextSibling;){if(e(o)&&(x.a.g.set(o,l,!0),0==--r))return a;a.push(o),t(o)&&r++}if(!i)throw Error("Cannot find closing comment tag to match: "+n.nodeValue);return null}function i(t,e){var i=n(t,e);return i?0<i.length?i[i.length-1].nextSibling:t.nextSibling:null}var o=u&&"\x3c!--test--\x3e"===u.createComment("test").text,r=o?/^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,a=o?/^\x3c!--\s*\/ko\s*--\x3e$/:/^\s*\/ko\s*$/,s={ul:!0,ol:!0},l="__ko_matchedEndComment__";x.h={ea:{},childNodes:function(e){return t(e)?n(e):e.childNodes},Ea:function(e){if(t(e))for(var n=0,i=(e=x.h.childNodes(e)).length;n<i;n++)x.removeNode(e[n]);else x.a.Sb(e)},ua:function(e,n){if(t(e)){x.h.Ea(e);for(var i=e.nextSibling,o=0,r=n.length;o<r;o++)i.parentNode.insertBefore(n[o],i)}else x.a.ua(e,n)},Uc:function(e,n){t(e)?e.parentNode.insertBefore(n,e.nextSibling):e.firstChild?e.insertBefore(n,e.firstChild):e.appendChild(n)},Vb:function(e,n,i){i?t(e)?e.parentNode.insertBefore(n,i.nextSibling):i.nextSibling?e.insertBefore(n,i.nextSibling):e.appendChild(n):x.h.Uc(e,n)},firstChild:function(n){if(t(n))return!n.nextSibling||e(n.nextSibling)?null:n.nextSibling;if(n.firstChild&&e(n.firstChild))throw Error("Found invalid end comment, as the first child of "+n);return n.firstChild},nextSibling:function(n){if(t(n)&&(n=i(n)),n.nextSibling&&e(n.nextSibling)){var o=n.nextSibling;if(e(o)&&!x.a.g.get(o,l))throw Error("Found end comment without a matching opening comment, as child of "+n);return null}return n.nextSibling},Bd:t,Ud:function(t){return(t=(o?t.text:t.nodeValue).match(r))?t[1]:null},Rc:function(n){if(s[x.a.P(n)]){var o=n.firstChild;if(o)do{if(1===o.nodeType){var r,a=null;if(r=o.firstChild)do{if(a)a.push(r);else if(t(r)){var l=i(r,!0);l?r=l:a=[r]}else e(r)&&(a=[r])}while(r=r.nextSibling);if(r=a)for(a=o.nextSibling,l=0;l<r.length;l++)a?n.insertBefore(r[l],a):n.appendChild(r[l])}}while(o=o.nextSibling)}}}}(),x.b("virtualElements",x.h),x.b("virtualElements.allowedBindings",x.h.ea),x.b("virtualElements.emptyNode",x.h.Ea),x.b("virtualElements.insertAfter",x.h.Vb),x.b("virtualElements.prepend",x.h.Uc),x.b("virtualElements.setDomNodeChildren",x.h.ua),x.ga=function(){this.md={}},x.a.extend(x.ga.prototype,{nodeHasBindings:function(t){switch(t.nodeType){case 1:return null!=t.getAttribute("data-bind")||x.i.getComponentNameForNode(t);case 8:return x.h.Bd(t);default:return!1}},getBindings:function(t,e){var n=(n=this.getBindingsString(t,e))?this.parseBindingsString(n,e,t):null;return x.i.sc(n,t,e,!1)},getBindingAccessors:function(t,e){var n=(n=this.getBindingsString(t,e))?this.parseBindingsString(n,e,t,{valueAccessors:!0}):null;return x.i.sc(n,t,e,!0)},getBindingsString:function(t){switch(t.nodeType){case 1:return t.getAttribute("data-bind");case 8:return x.h.Ud(t);default:return null}},parseBindingsString:function(t,e,n,i){try{var o,r=this.md,a=t+(i&&i.valueAccessors||"");if(!(o=r[a])){var s,l="with($context){with($data||{}){return{"+x.m.ub(t,i)+"}}}";s=new Function("$context","$element",l),o=r[a]=s}return o(e,n)}catch(e){throw e.message="Unable to parse bindings.\nBindings value: "+t+"\nMessage: "+e.message,e}}}),x.ga.instance=new x.ga,x.b("bindingProvider",x.ga),function(){function t(t){var e=(t=x.a.g.get(t,w))&&t.M;e&&(t.M=null,e.Sc())}function e(e,n,i){this.node=e,this.xc=n,this.ib=[],this.T=!1,n.M||x.a.I.za(e,t),i&&i.M&&(i.M.ib.push(e),this.Kb=i)}function n(t){return function(){return t}}function i(t){return t()}function o(t){return x.a.Ha(x.v.K(t),function(e,n){return function(){return t()[n]}})}function r(t,e,i){return"function"==typeof t?o(t.bind(null,e,i)):x.a.Ha(t,n)}function a(t,e){return o(this.getBindings.bind(this,t,e))}function c(t,e){var n=x.h.firstChild(e);if(n){var i,o=x.ga.instance,r=o.preprocessNode;if(r){for(;i=n;)n=x.h.nextSibling(i),r.call(o,i);n=x.h.firstChild(e)}for(;i=n;)n=x.h.nextSibling(i),d(t,i)}x.j.Ga(e,x.j.T)}function d(t,e){var n=t,i=1===e.nodeType;i&&x.h.Rc(e),(i||x.ga.instance.nodeHasBindings(e))&&(n=p(e,null,t).bindingContextForDescendants),n&&!b[x.a.P(e)]&&c(n,e)}function p(t,e,n){var o,r=x.a.g.Tb(t,w,{}),l=r.gd;if(!e){if(l)throw Error("You cannot apply bindings multiple times to the same element.");r.gd=!0}if(l||(r.context=n),e&&"function"!=typeof e)o=e;else{var u=x.ga.instance,c=u.getBindingAccessors||a,f=x.$(function(){return(o=e?e(n,t):c.call(u,t,n))&&(n[g]&&n[g](),n[v]&&n[v]()),o},null,{l:t});o&&f.ja()||(f=null)}var d,p=n;if(o){var h=function(){return x.a.Ha(f?f():o,i)},m=f?function(t){return function(){return i(f()[t])}}:function(t){return o[t]};h.get=function(t){return o[t]&&i(m(t))},h.has=function(t){return t in o},x.j.T in o&&x.j.subscribe(t,x.j.T,function(){var e=(0,o[x.j.T])();if(e){var n=x.h.childNodes(t);n.length&&e(n,x.Dc(n[0]))}}),x.j.oa in o&&(p=x.j.Bb(t,n),x.j.subscribe(t,x.j.oa,function(){var e=(0,o[x.j.oa])();e&&x.h.firstChild(t)&&e(t)})),r=function(t){var e=[],n={},i=[];return x.a.O(t,function o(r){if(!n[r]){var a=x.getBindingHandler(r);a&&(a.after&&(i.push(r),x.a.C(a.after,function(e){if(t[e]){if(-1!==x.a.A(i,e))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+i.join(", "));o(e)}}),i.length--),e.push({key:r,Lc:a})),n[r]=!0}}),e}(o),x.a.C(r,function(e){var n=e.Lc.init,i=e.Lc.update,r=e.key;if(8===t.nodeType&&!x.h.ea[r])throw Error("The binding '"+r+"' cannot be used with virtual elements");try{"function"==typeof n&&x.v.K(function(){var e=n(t,m(r),h,p.$data,p);if(e&&e.controlsDescendantBindings){if(d!==s)throw Error("Multiple bindings ("+d+" and "+r+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");d=r}}),"function"==typeof i&&x.$(function(){i(t,m(r),h,p.$data,p)},null,{l:t})}catch(t){throw t.message='Unable to process binding "'+r+": "+o[r]+'"\nMessage: '+t.message,t}})}return{shouldBindDescendants:r=d===s,bindingContextForDescendants:r&&p}}function h(t,e){return t&&t instanceof x.fa?t:new x.fa(t,s,s,e)}var g=x.a.Da("_subscribable"),m=x.a.Da("_ancestorBindingInfo"),v=x.a.Da("_dataDependency");x.f={};var b={script:!0,textarea:!0,template:!0};x.getBindingHandler=function(t){return x.f[t]};var y={};x.fa=function(t,e,n,i,o){function r(){var t=f?c():c,o=x.a.c(t);return e?(x.a.extend(l,e),m in e&&(l[m]=e[m])):(l.$parents=[],l.$root=o,l.ko=x),l[g]=a,u?o=l.$data:(l.$rawData=t,l.$data=o),n&&(l[n]=o),i&&i(l,e,o),e&&e[g]&&!x.U.o().Ub(e[g])&&e[g](),d&&(l[v]=d),l.$data}var a,l=this,u=t===y,c=u?s:t,f="function"==typeof c&&!x.N(c),d=o&&o.dataDependency;o&&o.exportDependencies?r():((a=x.wb(r)).w(),a.ja()?a.equalityComparer=null:l[g]=s)},x.fa.prototype.createChildContext=function(t,e,n,i){if(!i&&e&&"object"==typeof e&&(e=(i=e).as,n=i.extend),e&&i&&i.noChildContext){var o="function"==typeof t&&!x.N(t);return new x.fa(y,this,null,function(i){n&&n(i),i[e]=o?t():t},i)}return new x.fa(t,this,e,function(t,e){t.$parentContext=e,t.$parent=e.$data,t.$parents=(e.$parents||[]).slice(0),t.$parents.unshift(t.$parent),n&&n(t)},i)},x.fa.prototype.extend=function(t,e){return new x.fa(y,this,null,function(e){x.a.extend(e,"function"==typeof t?t(e):t)},e)};var w=x.a.g.Z();e.prototype.Sc=function(){this.Kb&&this.Kb.M&&this.Kb.M.rd(this.node)},e.prototype.rd=function(t){x.a.hb(this.ib,t),!this.ib.length&&this.T&&this.Bc()},e.prototype.Bc=function(){this.T=!0,this.xc.M&&!this.ib.length&&(this.xc.M=null,x.a.I.xb(this.node,t),x.j.Ga(this.node,x.j.oa),this.Sc())},x.j={T:"childrenComplete",oa:"descendantsComplete",subscribe:function(t,e,n,i){return(t=x.a.g.Tb(t,w,{})).Fa||(t.Fa=new x.R),t.Fa.subscribe(n,i,e)},Ga:function(t,e){var n=x.a.g.get(t,w);if(n&&(n.Fa&&n.Fa.notifySubscribers(t,e),e==x.j.T))if(n.M)n.M.Bc();else if(n.M===s&&n.Fa&&n.Fa.Wa(x.j.oa))throw Error("descendantsComplete event not supported for bindings on this node")},Bb:function(t,n){var i=x.a.g.Tb(t,w,{});return i.M||(i.M=new e(t,i,n[m])),n[m]==i?n:n.extend(function(t){t[m]=i})}},x.Sd=function(t){return(t=x.a.g.get(t,w))&&t.context},x.eb=function(t,e,n){return 1===t.nodeType&&x.h.Rc(t),p(t,e,h(n))},x.kd=function(t,e,n){return n=h(n),x.eb(t,r(e,n,t),n)},x.Pa=function(t,e){1!==e.nodeType&&8!==e.nodeType||c(h(t),e)},x.uc=function(t,e,n){if(!f&&l.jQuery&&(f=l.jQuery),2>arguments.length){if(!(e=u.body))throw Error("ko.applyBindings: could not find document.body; has the document been loaded?")}else if(!e||1!==e.nodeType&&8!==e.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");d(h(t,n),e)},x.Cc=function(t){return!t||1!==t.nodeType&&8!==t.nodeType?s:x.Sd(t)},x.Dc=function(t){return(t=x.Cc(t))?t.$data:s},x.b("bindingHandlers",x.f),x.b("bindingEvent",x.j),x.b("bindingEvent.subscribe",x.j.subscribe),x.b("bindingEvent.startPossiblyAsyncContentBinding",x.j.Bb),x.b("applyBindings",x.uc),x.b("applyBindingsToDescendants",x.Pa),x.b("applyBindingAccessorsToNode",x.eb),x.b("applyBindingsToNode",x.kd),x.b("contextFor",x.Cc),x.b("dataFor",x.Dc)}(),function(t){function e(e,i){var a,s=Object.prototype.hasOwnProperty.call(o,e)?o[e]:t;s?s.subscribe(i):((s=o[e]=new x.R).subscribe(i),n(e,function(t,n){var i=!(!n||!n.synchronous);r[e]={definition:t,Fd:i},delete o[e],a||i?s.notifySubscribers(t):x.ma.yb(function(){s.notifySubscribers(t)})}),a=!0)}function n(t,e){i("getConfig",[t],function(n){n?i("loadComponent",[t,n],function(t){e(t,n)}):e(null,null)})}function i(e,n,o,r){r||(r=x.i.loaders.slice(0));var a=r.shift();if(a){var s=a[e];if(s){var l=!1;if(s.apply(a,n.concat(function(t){l?o(null):null!==t?o(t):i(e,n,o,r)}))!==t&&(l=!0,!a.suppressLoaderExceptions))throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else i(e,n,o,r)}else o(null)}var o={},r={};x.i={get:function(n,i){var o=Object.prototype.hasOwnProperty.call(r,n)?r[n]:t;o?o.Fd?x.v.K(function(){i(o.definition)}):x.ma.yb(function(){i(o.definition)}):e(n,i)},Ac:function(t){delete r[t]},nc:i},x.i.loaders=[],x.b("components",x.i),x.b("components.get",x.i.get),x.b("components.clearCachedDefinition",x.i.Ac)}(),function(){function t(t,e,n,i){function r(){0==--l&&i(a)}var a={},l=2,u=n.template;n=n.viewModel,u?o(e,u,function(e){x.i.nc("loadTemplate",[t,e],function(t){a.template=t,r()})}):r(),n?o(e,n,function(e){x.i.nc("loadViewModel",[t,e],function(t){a[s]=t,r()})}):r()}function n(t){switch(x.a.P(t)){case"script":return x.a.ta(t.text);case"textarea":return x.a.ta(t.value);case"template":if(i(t.content))return x.a.Ca(t.content.childNodes)}return x.a.Ca(t.childNodes)}function i(t){return l.DocumentFragment?t instanceof DocumentFragment:t&&11===t.nodeType}function o(t,n,i){"string"==typeof n.require?e||l.require?(e||l.require)([n.require],i):t("Uses require, but no AMD loader is present"):i(n)}function r(t){return function(e){throw Error("Component '"+t+"': "+e)}}var a={};x.i.register=function(t,e){if(!e)throw Error("Invalid configuration for "+t);if(x.i.sb(t))throw Error("Component "+t+" is already registered");a[t]=e},x.i.sb=function(t){return Object.prototype.hasOwnProperty.call(a,t)},x.i.unregister=function(t){delete a[t],x.i.Ac(t)},x.i.Ec={getConfig:function(t,e){e(x.i.sb(t)?a[t]:null)},loadComponent:function(e,n,i){var a=r(e);o(a,n,function(n){t(e,a,n,i)})},loadTemplate:function(t,e,o){if(t=r(t),"string"==typeof e)o(x.a.ta(e));else if(e instanceof Array)o(e);else if(i(e))o(x.a.la(e.childNodes));else if(e.element)if(e=e.element,l.HTMLElement?e instanceof HTMLElement:e&&e.tagName&&1===e.nodeType)o(n(e));else if("string"==typeof e){var a=u.getElementById(e);a?o(n(a)):t("Cannot find element with ID "+e)}else t("Unknown element type: "+e);else t("Unknown template value: "+e)},loadViewModel:function(t,e,n){!function t(e,n,i){if("function"==typeof n)i(function(t){return new n(t)});else if("function"==typeof n[s])i(n[s]);else if("instance"in n){var o=n.instance;i(function(){return o})}else"viewModel"in n?t(e,n.viewModel,i):e("Unknown viewModel value: "+n)}(r(t),e,n)}};var s="createViewModel";x.b("components.register",x.i.register),x.b("components.isRegistered",x.i.sb),x.b("components.unregister",x.i.unregister),x.b("components.defaultLoader",x.i.Ec),x.i.loaders.push(x.i.Ec),x.i.cd=a}(),function(){function t(t,n){if(i=t.getAttribute("params")){var i=e.parseBindingsString(i,n,t,{valueAccessors:!0,bindingParams:!0}),o=(i=x.a.Ha(i,function(e){return x.o(e,null,{l:t})}),x.a.Ha(i,function(e){var n=e.w();return e.ja()?x.o({read:function(){return x.a.c(e())},write:x.Ya(n)&&function(t){e()(t)},l:t}):n}));return Object.prototype.hasOwnProperty.call(o,"$raw")||(o.$raw=i),o}return{$raw:{}}}x.i.getComponentNameForNode=function(t){var e=x.a.P(t);if(x.i.sb(e)&&(-1!=e.indexOf("-")||"[object HTMLUnknownElement]"==""+t||8>=x.a.W&&t.tagName===e))return e},x.i.sc=function(e,n,i,o){if(1===n.nodeType){var r=x.i.getComponentNameForNode(n);if(r){if((e=e||{}).component)throw Error('Cannot use the "component" binding on a custom element matching a component');var a={name:r,params:t(n,i)};e.component=o?function(){return a}:a}}return e};var e=new x.ga;9>x.a.W&&(x.i.register=function(t){return function(e){return t.apply(this,arguments)}}(x.i.register),u.createDocumentFragment=function(t){return function(){var e,n=t(),i=x.i.cd;for(e in i);return n}}(u.createDocumentFragment))}(),function(){var t=0;x.f.component={init:function(e,n,i,o,r){function a(){var t=s&&s.dispose;"function"==typeof t&&t.call(s),u&&u.s(),l=s=u=null}var s,l,u,c=x.a.la(x.h.childNodes(e));return x.h.Ea(e),x.a.I.za(e,a),x.o(function(){var i,o,f=x.a.c(n());if("string"==typeof f?i=f:(i=x.a.c(f.name),o=x.a.c(f.params)),!i)throw Error("No component name specified");var d=x.j.Bb(e,r),p=l=++t;x.i.get(i,function(t){if(l===p){if(a(),!t)throw Error("Unknown component '"+i+"'");!function(t,e,n){if(!(e=e.template))throw Error("Component '"+t+"' has no template");t=x.a.Ca(e),x.h.ua(n,t)}(i,t,e);var n=function(t,e,n){var i=t.createViewModel;return i?i.call(t,e,n):e}(t,o,{element:e,templateNodes:c});t=d.createChildContext(n,{extend:function(t){t.$component=n,t.$componentTemplateNodes=c}}),n&&n.koDescendantsComplete&&(u=x.j.subscribe(e,x.j.oa,n.koDescendantsComplete,n)),s=n,x.Pa(t,e)}})},null,{l:e}),{controlsDescendantBindings:!0}}},x.h.ea.component=!0}();var O={class:"className",for:"htmlFor"};x.f.attr={update:function(t,e){var n=x.a.c(e())||{};x.a.O(n,function(e,n){n=x.a.c(n);var i=e.indexOf(":"),o=(i="lookupNamespaceURI"in t&&0<i&&t.lookupNamespaceURI(e.substr(0,i)),!1===n||null===n||n===s);o?i?t.removeAttributeNS(i,e):t.removeAttribute(e):n=n.toString(),8>=x.a.W&&e in O?(e=O[e],o?t.removeAttribute(e):t[e]=n):o||(i?t.setAttributeNS(i,e,n):t.setAttribute(e,n)),"name"===e&&x.a.Xc(t,o?"":n)})}},x.f.checked={after:["value","attr"],init:function(t,e,n){function i(){var i=t.checked,l=o();if(!x.U.rb()&&(i||!a&&!x.U.pa())){var f=x.v.K(e);if(u){var p=c?f.w():f,h=d;d=l,h!==l?i&&(x.a.Oa(p,l,!0),x.a.Oa(p,h,!1)):x.a.Oa(p,l,i),c&&x.Ya(f)&&f(p)}else r&&(l===s?l=i:i||(l=s)),x.m.$a(f,n,"checked",l,!0)}}var o=x.wb(function(){return n.has("checkedValue")?x.a.c(n.get("checkedValue")):f?n.has("value")?x.a.c(n.get("value")):t.value:void 0}),r="checkbox"==t.type,a="radio"==t.type;if(r||a){var l=e(),u=r&&x.a.c(l)instanceof Array,c=!(u&&l.push&&l.splice),f=a||u,d=u?o():s;a&&!t.name&&x.f.uniqueName.init(t,function(){return!0}),x.o(i,null,{l:t}),x.a.H(t,"click",i),x.o(function(){var n=x.a.c(e()),i=o();u?(t.checked=0<=x.a.A(n,i),d=i):t.checked=r&&i===s?!!n:o()===n},null,{l:t}),l=s}}},x.m.va.checked=!0,x.f.checkedValue={update:function(t,e){t.value=x.a.c(e())}},x.f.class={update:function(t,e){var n=x.a.Cb(x.a.c(e()));x.a.Eb(t,t.__ko__cssValue,!1),t.__ko__cssValue=n,x.a.Eb(t,n,!0)}},x.f.css={update:function(t,e){var n=x.a.c(e());null!==n&&"object"==typeof n?x.a.O(n,function(e,n){n=x.a.c(n),x.a.Eb(t,e,n)}):x.f.class.update(t,e)}},x.f.enable={update:function(t,e){var n=x.a.c(e());n&&t.disabled?t.removeAttribute("disabled"):n||t.disabled||(t.disabled=!0)}},x.f.disable={update:function(t,e){x.f.enable.update(t,function(){return!x.a.c(e())})}},x.f.event={init:function(t,e,n,i,o){var r=e()||{};x.a.O(r,function(r){"string"==typeof r&&x.a.H(t,r,function(t){var a,s=e()[r];if(s){try{var l=x.a.la(arguments);i=o.$data,l.unshift(i),a=s.apply(i,l)}finally{!0!==a&&(t.preventDefault?t.preventDefault():t.returnValue=!1)}!1===n.get(r+"Bubble")&&(t.cancelBubble=!0,t.stopPropagation&&t.stopPropagation())}})})}},x.f.foreach={Qc:function(t){return function(){var e=t(),n=x.a.$b(e);return n&&"number"!=typeof n.length?(x.a.c(e),{foreach:n.data,as:n.as,noChildContext:n.noChildContext,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:x.ba.Na}):{foreach:e,templateEngine:x.ba.Na}}},init:function(t,e){return x.f.template.init(t,x.f.foreach.Qc(e))},update:function(t,e,n,i,o){return x.f.template.update(t,x.f.foreach.Qc(e),n,i,o)}},x.m.Ra.foreach=!1,x.h.ea.foreach=!0,x.f.hasfocus={init:function(t,e,n){function i(i){t.__ko_hasfocusUpdating=!0;var o=t.ownerDocument;if("activeElement"in o){var r;try{r=o.activeElement}catch(t){r=o.body}i=r===t}o=e(),x.m.$a(o,n,"hasfocus",i,!0),t.__ko_hasfocusLastValue=i,t.__ko_hasfocusUpdating=!1}var o=i.bind(null,!0),r=i.bind(null,!1);x.a.H(t,"focus",o),x.a.H(t,"focusin",o),x.a.H(t,"blur",r),x.a.H(t,"focusout",r),t.__ko_hasfocusLastValue=!1},update:function(t,e){var n=!!x.a.c(e());t.__ko_hasfocusUpdating||t.__ko_hasfocusLastValue===n||(n?t.focus():t.blur(),!n&&t.__ko_hasfocusLastValue&&t.ownerDocument.body.focus(),x.v.K(x.a.Fb,null,[t,n?"focusin":"focusout"]))}},x.m.va.hasfocus=!0,x.f.hasFocus=x.f.hasfocus,x.m.va.hasFocus="hasfocus",x.f.html={init:function(){return{controlsDescendantBindings:!0}},update:function(t,e){x.a.dc(t,e())}},function(){function t(t,e,n){x.f[t]={init:function(t,i,o,r,a){var s,l,u,c,f,d={};if(e){r=o.get("as");var p=o.get("noChildContext");d={as:r,noChildContext:p,exportDependencies:f=!(r&&p)}}return c=(u="render"==o.get("completeOn"))||o.has(x.j.oa),x.o(function(){var o,r=x.a.c(i()),p=!n!=!r,h=!l;(f||p!==s)&&(c&&(a=x.j.Bb(t,a)),p&&(e&&!f||(d.dataDependency=x.U.o()),o=e?a.createChildContext("function"==typeof r?r:i,d):x.U.pa()?a.extend(null,d):a),h&&x.U.pa()&&(l=x.a.Ca(x.h.childNodes(t),!0)),p?(h||x.h.ua(t,x.a.Ca(l)),x.Pa(o,t)):(x.h.Ea(t),u||x.j.Ga(t,x.j.T)),s=p)},null,{l:t}),{controlsDescendantBindings:!0}}},x.m.Ra[t]=!1,x.h.ea[t]=!0}t("if"),t("ifnot",!1,!0),t("with",!0)}(),x.f.let={init:function(t,e,n,i,o){return e=o.extend(e),x.Pa(e,t),{controlsDescendantBindings:!0}}},x.h.ea.let=!0;var j={};x.f.options={init:function(t){if("select"!==x.a.P(t))throw Error("options binding applies only to SELECT elements");for(;0<t.length;)t.remove(0);return{controlsDescendantBindings:!0}},update:function(t,e,n){function i(){return x.a.fb(t.options,function(t){return t.selected})}function o(t,e,n){var i=typeof e;return"function"==i?e(t):"string"==i?t[e]:n}function r(e,i){if(h&&c)x.u.ya(t,x.a.c(n.get("value")),!0);else if(p.length){var o=0<=x.a.A(p,x.u.L(i[0]));x.a.Yc(i[0],o),h&&!o&&x.v.K(x.a.Fb,null,[t,"change"])}}var a=t.multiple,l=0!=t.length&&a?t.scrollTop:null,u=x.a.c(e()),c=n.get("valueAllowUnset")&&n.has("value"),f=n.get("optionsIncludeDestroyed");e={};var d,p=[];c||(a?p=x.a.Mb(i(),x.u.L):0<=t.selectedIndex&&p.push(x.u.L(t.options[t.selectedIndex]))),u&&(void 0===u.length&&(u=[u]),d=x.a.fb(u,function(t){return f||t===s||null===t||!x.a.c(t._destroy)}),n.has("optionsCaption")&&null!==(u=x.a.c(n.get("optionsCaption")))&&u!==s&&d.unshift(j));var h=!1;e.beforeRemove=function(e){t.removeChild(e)},u=r,n.has("optionsAfterRender")&&"function"==typeof n.get("optionsAfterRender")&&(u=function(t,e){r(0,e),x.v.K(n.get("optionsAfterRender"),null,[e[0],t!==j?t:s])}),x.a.cc(t,d,function(e,i,r){return r.length&&(p=!c&&r[0].selected?[x.u.L(r[0])]:[],h=!0),i=t.ownerDocument.createElement("option"),e===j?(x.a.Ab(i,n.get("optionsCaption")),x.u.ya(i,s)):(r=o(e,n.get("optionsValue"),e),x.u.ya(i,x.a.c(r)),e=o(e,n.get("optionsText"),r),x.a.Ab(i,e)),[i]},e,u),x.v.K(function(){c?x.u.ya(t,x.a.c(n.get("value")),!0):(a?p.length&&i().length<p.length:p.length&&0<=t.selectedIndex?x.u.L(t.options[t.selectedIndex])!==p[0]:p.length||0<=t.selectedIndex)&&x.a.Fb(t,"change")}),x.a.vd(t),l&&20<Math.abs(l-t.scrollTop)&&(t.scrollTop=l)}},x.f.options.Yb=x.a.g.Z(),x.f.selectedOptions={after:["options","foreach"],init:function(t,e,n){x.a.H(t,"change",function(){var i=e(),o=[];x.a.C(t.getElementsByTagName("option"),function(t){t.selected&&o.push(x.u.L(t))}),x.m.$a(i,n,"selectedOptions",o)})},update:function(t,e){if("select"!=x.a.P(t))throw Error("values binding applies only to SELECT elements");var n=x.a.c(e()),i=t.scrollTop;n&&"number"==typeof n.length&&x.a.C(t.getElementsByTagName("option"),function(t){var e=0<=x.a.A(n,x.u.L(t));t.selected!=e&&x.a.Yc(t,e)}),t.scrollTop=i}},x.m.va.selectedOptions=!0,x.f.style={update:function(t,e){var n=x.a.c(e()||{});x.a.O(n,function(e,n){if(null!==(n=x.a.c(n))&&n!==s&&!1!==n||(n=""),f)f(t).css(e,n);else if(/^--/.test(e))t.style.setProperty(e,n);else{e=e.replace(/-(\w)/g,function(t,e){return e.toUpperCase()});var i=t.style[e];t.style[e]=n,n===i||t.style[e]!=i||isNaN(n)||(t.style[e]=n+"px")}})}},x.f.submit={init:function(t,e,n,i,o){if("function"!=typeof e())throw Error("The value for a submit binding must be a function");x.a.H(t,"submit",function(n){var i,r=e();try{i=r.call(o.$data,t)}finally{!0!==i&&(n.preventDefault?n.preventDefault():n.returnValue=!1)}})}},x.f.text={init:function(){return{controlsDescendantBindings:!0}},update:function(t,e){x.a.Ab(t,e())}},x.h.ea.text=!0,function(){if(l&&l.navigator){var t,e,n,i,o,r=function(t){if(t)return parseFloat(t[1])},a=l.navigator.userAgent;(t=l.opera&&l.opera.version&&parseInt(l.opera.version()))||(o=r(a.match(/Edge\/([^ ]+)$/)))||r(a.match(/Chrome\/([^ ]+)/))||(e=r(a.match(/Version\/([^ ]+) Safari/)))||(n=r(a.match(/Firefox\/([^ ]+)/)))||(i=x.a.W||r(a.match(/MSIE ([^ ]+)/)))||(i=r(a.match(/rv:([^ )]+)/)))}if(8<=i&&10>i)var u=x.a.g.Z(),c=x.a.g.Z(),f=function(t){var e=this.activeElement;(e=e&&x.a.g.get(e,c))&&e(t)},d=function(t,e){var n=t.ownerDocument;x.a.g.get(n,u)||(x.a.g.set(n,u,!0),x.a.H(n,"selectionchange",f)),x.a.g.set(t,c,e)};x.f.textInput={init:function(r,a,l){function u(t,e){x.a.H(r,t,e)}function c(){p||(h=r.value,p=x.a.setTimeout(f,4))}function f(){clearTimeout(p),h=p=s;var t=r.value;g!==t&&(g=t,x.m.$a(a(),l,"textInput",t))}var p,h,g=r.value,m=9==x.a.W?c:f,v=!1;i&&u("keypress",f),11>i&&u("propertychange",function(t){v||"value"!==t.propertyName||m(t)}),8==i&&(u("keyup",f),u("keydown",f)),d&&(d(r,m),u("dragend",c)),(!i||9<=i)&&u("input",m),5>e&&"textarea"===x.a.P(r)?(u("keydown",c),u("paste",c),u("cut",c)):11>t?u("keydown",c):4>n?(u("DOMAutoComplete",f),u("dragdrop",f),u("drop",f)):o&&"number"===r.type&&u("keydown",c),u("change",f),u("blur",f),x.o(function t(){var e=x.a.c(a());null!==e&&e!==s||(e=""),h!==s&&e===h?x.a.setTimeout(t,4):r.value!==e&&(v=!0,r.value=e,v=!1,g=r.value)},null,{l:r})}},x.m.va.textInput=!0,x.f.textinput={preprocess:function(t,e,n){n("textInput",t)}}}(),x.f.uniqueName={init:function(t,e){if(e()){var n="ko_unique_"+ ++x.f.uniqueName.qd;x.a.Xc(t,n)}}},x.f.uniqueName.qd=0,x.f.using={init:function(t,e,n,i,o){var r;return n.has("as")&&(r={as:n.get("as"),noChildContext:n.get("noChildContext")}),e=o.createChildContext(e,r),x.Pa(e,t),{controlsDescendantBindings:!0}}},x.h.ea.using=!0,x.f.value={after:["options","foreach"],init:function(t,e,n){var i=x.a.P(t),o="input"==i;if(!o||"checkbox"!=t.type&&"radio"!=t.type){var r=["change"],a=n.get("valueUpdate"),l=!1,u=null;a&&("string"==typeof a&&(a=[a]),x.a.gb(r,a),r=x.a.vc(r));var c,f=function(){u=null,l=!1;var i=e(),o=x.u.L(t);x.m.$a(i,n,"value",o)};!x.a.W||!o||"text"!=t.type||"off"==t.autocomplete||t.form&&"off"==t.form.autocomplete||-1!=x.a.A(r,"propertychange")||(x.a.H(t,"propertychange",function(){l=!0}),x.a.H(t,"focus",function(){l=!1}),x.a.H(t,"blur",function(){l&&f()})),x.a.C(r,function(e){var n=f;x.a.Td(e,"after")&&(n=function(){u=x.u.L(t),x.a.setTimeout(f,0)},e=e.substring(5)),x.a.H(t,e,n)}),c=o&&"file"==t.type?function(){var n=x.a.c(e());null===n||n===s||""===n?t.value="":x.v.K(f)}:function(){var o=x.a.c(e()),r=x.u.L(t);null!==u&&o===u?x.a.setTimeout(c,0):o===r&&r!==s||("select"===i?(r=n.get("valueAllowUnset"),x.u.ya(t,o,r),r||o===x.u.L(t)||x.v.K(f)):x.u.ya(t,o))},x.o(c,null,{l:t})}else x.eb(t,{checkedValue:e})},update:function(){}},x.m.va.value=!0,x.f.visible={update:function(t,e){var n=x.a.c(e()),i="none"!=t.style.display;n&&!i?t.style.display="":!n&&i&&(t.style.display="none")}},x.f.hidden={update:function(t,e){x.f.visible.update(t,function(){return!x.a.c(e())})}},function(t){x.f[t]={init:function(e,n,i,o,r){return x.f.event.init.call(this,e,function(){var e={};return e[t]=n(),e},i,o,r)}}}("click"),x.ca=function(){},x.ca.prototype.renderTemplateSource=function(){throw Error("Override renderTemplateSource")},x.ca.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock")},x.ca.prototype.makeTemplateSource=function(t,e){if("string"==typeof t){var n=(e=e||u).getElementById(t);if(!n)throw Error("Cannot find template with ID "+t);return new x.B.D(n)}if(1==t.nodeType||8==t.nodeType)return new x.B.ia(t);throw Error("Unknown template type: "+t)},x.ca.prototype.renderTemplate=function(t,e,n,i){return t=this.makeTemplateSource(t,i),this.renderTemplateSource(t,e,n,i)},x.ca.prototype.isTemplateRewritten=function(t,e){return!1===this.allowTemplateRewriting||this.makeTemplateSource(t,e).data("isRewritten")},x.ca.prototype.rewriteTemplate=function(t,e,n){e=e((t=this.makeTemplateSource(t,n)).text()),t.text(e),t.data("isRewritten",!0)},x.b("templateEngine",x.ca),x.ic=function(){function t(t,e,n,i){t=x.m.Zb(t);for(var o=x.m.Ra,r=0;r<t.length;r++){var a=t[r].key;if(Object.prototype.hasOwnProperty.call(o,a)){var s=o[a];if("function"==typeof s){if(a=s(t[r].value))throw Error(a)}else if(!s)throw Error("This template engine does not support the '"+a+"' binding within its templates")}}return n="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+x.m.ub(t,{valueAccessors:!0})+" } })()},'"+n.toLowerCase()+"')",i.createJavaScriptEvaluatorBlock(n)+e}var e=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,n=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{wd:function(t,e,n){e.isTemplateRewritten(t,n)||e.rewriteTemplate(t,function(t){return x.ic.Kd(t,e)},n)},Kd:function(i,o){return i.replace(e,function(e,n,i,r,a){return t(a,n,i,o)}).replace(n,function(e,n){return t(n,"\x3c!-- ko --\x3e","#comment",o)})},ld:function(t,e){return x.aa.Wb(function(n,i){var o=n.nextSibling;o&&o.nodeName.toLowerCase()===e&&x.eb(o,t,i)})}}}(),x.b("__tr_ambtns",x.ic.ld),function(){x.B={},x.B.D=function(t){if(this.D=t){var e=x.a.P(t);this.Db="script"===e?1:"textarea"===e?2:"template"==e&&t.content&&11===t.content.nodeType?3:4}},x.B.D.prototype.text=function(){var t=1===this.Db?"text":2===this.Db?"value":"innerHTML";if(0==arguments.length)return this.D[t];var e=arguments[0];"innerHTML"===t?x.a.dc(this.D,e):this.D[t]=e};var t=x.a.g.Z()+"_";x.B.D.prototype.data=function(e){if(1===arguments.length)return x.a.g.get(this.D,t+e);x.a.g.set(this.D,t+e,arguments[1])};var e=x.a.g.Z();x.B.D.prototype.nodes=function(){var t=this.D;if(0==arguments.length){var n=x.a.g.get(t,e)||{},i=n.jb||(3===this.Db?t.content:4===this.Db?t:s);return i&&!n.hd||(n=this.text())&&(i=x.a.Ld(n,t.ownerDocument),this.text(""),x.a.g.set(t,e,{jb:i,hd:!0})),i}x.a.g.set(t,e,{jb:arguments[0]})},x.B.ia=function(t){this.D=t},x.B.ia.prototype=new x.B.D,x.B.ia.prototype.constructor=x.B.ia,x.B.ia.prototype.text=function(){if(0==arguments.length){var t=x.a.g.get(this.D,e)||{};return t.jc===s&&t.jb&&(t.jc=t.jb.innerHTML),t.jc}x.a.g.set(this.D,e,{jc:arguments[0]})},x.b("templateSources",x.B),x.b("templateSources.domElement",x.B.D),x.b("templateSources.anonymousTemplate",x.B.ia)}(),function(){function t(t,e,n){var i;for(e=x.h.nextSibling(e);t&&(i=t)!==e;)n(i,t=x.h.nextSibling(i))}function e(e,n){if(e.length){var i=e[0],o=e[e.length-1],r=i.parentNode,a=x.ga.instance,s=a.preprocessNode;if(s){if(t(i,o,function(t,e){var n=t.previousSibling,r=s.call(a,t);r&&(t===i&&(i=r[0]||e),t===o&&(o=r[r.length-1]||n))}),e.length=0,!i)return;i===o?e.push(i):(e.push(i,o),x.a.Ua(e,r))}t(i,o,function(t){1!==t.nodeType&&8!==t.nodeType||x.uc(n,t)}),t(i,o,function(t){1!==t.nodeType&&8!==t.nodeType||x.aa.bd(t,[n])}),x.a.Ua(e,r)}}function n(t){return t.nodeType?t:0<t.length?t[0]:null}function i(t,i,o,a,s){s=s||{};var l=(t&&n(t)||o||{}).ownerDocument,u=s.templateEngine||r;if(x.ic.wd(o,u,l),"number"!=typeof(o=u.renderTemplate(o,a,s,l)).length||0<o.length&&"number"!=typeof o[0].nodeType)throw Error("Template engine must return an array of DOM nodes");switch(l=!1,i){case"replaceChildren":x.h.ua(t,o),l=!0;break;case"replaceNode":x.a.Wc(t,o),l=!0;break;case"ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+i)}return l&&(e(o,a),s.afterRender&&x.v.K(s.afterRender,null,[o,a[s.as||"$data"]]),"replaceChildren"==i&&x.j.Ga(t,x.j.T)),o}function o(t,e,n){return x.N(t)?t():"function"==typeof t?t(e,n):t}var r;x.ec=function(t){if(t!=s&&!(t instanceof x.ca))throw Error("templateEngine must inherit from ko.templateEngine");r=t},x.bc=function(t,e,a,l,u){if(((a=a||{}).templateEngine||r)==s)throw Error("Set a template engine before calling renderTemplate");if(u=u||"replaceChildren",l){var c=n(l);return x.$(function(){var r=e&&e instanceof x.fa?e:new x.fa(e,null,null,null,{exportDependencies:!0}),s=o(t,r.$data,r);r=i(l,u,s,r,a),"replaceNode"==u&&(c=n(l=r))},null,{Sa:function(){return!c||!x.a.Rb(c)},l:c&&"replaceNode"==u?c.parentNode:c})}return x.aa.Wb(function(n){x.bc(t,e,a,n,"replaceNode")})},x.Pd=function(t,n,r,a,l){function u(t,e){x.v.K(x.a.cc,null,[a,t,f,r,c,e]),x.j.Ga(a,x.j.T)}function c(t,n){e(n,d),r.afterRender&&r.afterRender(n,t),d=null}function f(e,n){d=l.createChildContext(e,{as:p,noChildContext:r.noChildContext,extend:function(t){t.$index=n,p&&(t[p+"Index"]=n)}});var s=o(t,e,d);return i(a,"ignoreTargetNode",s,d,r)}var d,p=r.as,h=!1===r.includeDestroyed||x.options.foreachHidesDestroyed&&!r.includeDestroyed;if(h||r.beforeRemove||!x.Oc(n))return x.$(function(){var t=x.a.c(n)||[];void 0===t.length&&(t=[t]),h&&(t=x.a.fb(t,function(t){return t===s||null===t||!x.a.c(t._destroy)})),u(t)},null,{l:a});u(n.w());var g=n.subscribe(function(t){u(n(),t)},null,"arrayChange");return g.l(a),g};var a=x.a.g.Z(),l=x.a.g.Z();x.f.template={init:function(t,e){var n=x.a.c(e());if("string"==typeof n||n.name)x.h.Ea(t);else if("nodes"in n){if(n=n.nodes||[],x.N(n))throw Error('The "nodes" option must be a plain, non-observable array.');var i=n[0]&&n[0].parentNode;i&&x.a.g.get(i,l)||(i=x.a.Xb(n),x.a.g.set(i,l,!0)),new x.B.ia(t).nodes(i)}else{if(!(0<(n=x.h.childNodes(t)).length))throw Error("Anonymous template defined, but no template content was provided");i=x.a.Xb(n),new x.B.ia(t).nodes(i)}return{controlsDescendantBindings:!0}},update:function(t,e,n,i,o){var r=e();n=!0,i=null,"string"==typeof(e=x.a.c(r))?e={}:(r=e.name,"if"in e&&(n=x.a.c(e.if)),n&&"ifnot"in e&&(n=!x.a.c(e.ifnot))),"foreach"in e?i=x.Pd(r||t,n&&e.foreach||[],e,t,o):n?(n=o,"data"in e&&(n=o.createChildContext(e.data,{as:e.as,noChildContext:e.noChildContext,exportDependencies:!0})),i=x.bc(r||t,n,e,t)):x.h.Ea(t),o=i,(e=x.a.g.get(t,a))&&"function"==typeof e.s&&e.s(),x.a.g.set(t,a,!o||o.ja&&!o.ja()?s:o)}},x.m.Ra.template=function(t){return 1==(t=x.m.Zb(t)).length&&t[0].unknown||x.m.Hd(t,"name")?null:"This template engine does not support anonymous templates nested within its templates"},x.h.ea.template=!0}(),x.b("setTemplateEngine",x.ec),x.b("renderTemplate",x.bc),x.a.Jc=function(t,e,n){var i,o,r,a,s;if(t.length&&e.length)for(i=o=0;(!n||i<n)&&(a=t[o]);++o){for(r=0;s=e[r];++r)if(a.value===s.value){a.moved=s.index,s.moved=a.index,e.splice(r,1),i=r=0;break}i+=r}},x.a.Ob=function(){function t(t,e,n,i,o){var r,a,s,l,u,c=Math.min,f=Math.max,d=[],p=t.length,h=e.length,g=h-p||1,m=p+h+1;for(r=0;r<=p;r++)for(l=s,d.push(s=[]),u=c(h,r+g),a=f(0,r-1);a<=u;a++)s[a]=a?r?t[r-1]===e[a-1]?l[a-1]:c(l[a]||m,s[a-1]||m)+1:a+1:r+1;for(c=[],f=[],g=[],r=p,a=h;r||a;)h=d[r][a]-1,a&&h===d[r][a-1]?f.push(c[c.length]={status:n,value:e[--a],index:a}):r&&h===d[r-1][a]?g.push(c[c.length]={status:i,value:t[--r],index:r}):(--a,--r,o.sparse||c.push({status:"retained",value:e[a]}));return x.a.Jc(g,f,!o.dontLimitMoves&&10*p),c.reverse()}return function(e,n,i){return i="boolean"==typeof i?{dontLimitMoves:i}:i||{},n=n||[],(e=e||[]).length<n.length?t(e,n,"added","deleted",i):t(n,e,"deleted","added",i)}}(),x.b("utils.compareArrays",x.a.Ob),function(){function t(t,e,n,i,o){var r=[],a=x.$(function(){var a=e(n,o,x.a.Ua(r,t))||[];0<r.length&&(x.a.Wc(r,a),i&&x.v.K(i,null,[n,a,o])),r.length=0,x.a.gb(r,a)},null,{l:t,Sa:function(){return!x.a.jd(r)}});return{Y:r,$:a.ja()?a:s}}var e=x.a.g.Z(),n=x.a.g.Z();x.a.cc=function(i,o,r,a,l,u){function c(t){p={Aa:t,nb:x.sa(T++)},y.push(p),b||N.push(p)}function f(t){p=v[t],T!==p.nb.w()&&S.push(p),p.nb(T++),x.a.Ua(p.Y,i),y.push(p)}function d(t,e){if(t)for(var n=0,i=e.length;n<i;n++)x.a.C(e[n].Y,function(i){t(i,n,e[n].Aa)})}void 0===(o=o||[]).length&&(o=[o]),a=a||{};var p,h,g,m,v=x.a.g.get(i,e),b=!v,y=[],w=0,T=0,C=[],E=[],k=[],S=[],N=[],D=0;if(b)x.a.C(o,c);else{if(!u||v&&v._countWaitingForRemove){var $=x.a.Mb(v,function(t){return t.Aa});u=x.a.Ob($,o,{dontLimitMoves:a.dontLimitMoves,sparse:!0})}var A,O,j;for($=0;A=u[$];$++)switch(O=A.moved,j=A.index,A.status){case"deleted":for(;w<j;)f(w++);O===s&&((p=v[w]).$&&(p.$.s(),p.$=s),x.a.Ua(p.Y,i).length&&(a.beforeRemove&&(y.push(p),D++,p.Aa===n?p=null:k.push(p)),p&&C.push.apply(C,p.Y))),w++;break;case"added":for(;T<j;)f(w++);O!==s?(E.push(y.length),f(O)):c(A.value)}for(;T<o.length;)f(w++);y._countWaitingForRemove=D}x.a.g.set(i,e,y),d(a.beforeMove,S),x.a.C(C,a.beforeRemove?x.na:x.removeNode);try{m=i.ownerDocument.activeElement}catch(t){}if(E.length)for(;($=E.shift())!=s;){for(p=y[$],h=s;$;)if((g=y[--$].Y)&&g.length){h=g[g.length-1];break}for(o=0;w=p.Y[o];h=w,o++)x.h.Vb(i,w,h)}for($=0,E=x.h.firstChild(i);p=y[$];$++){for(p.Y||x.a.extend(p,t(i,r,p.Aa,l,p.nb)),o=0;w=p.Y[o];E=w.nextSibling,h=w,o++)w!==E&&x.h.Vb(i,w,h);!p.Dd&&l&&(l(p.Aa,p.Y,p.nb),p.Dd=!0,h=p.Y[p.Y.length-1])}for(m&&i.ownerDocument.activeElement!=m&&m.focus(),d(a.beforeRemove,k),$=0;$<k.length;++$)k[$].Aa=n;d(a.afterMove,S),d(a.afterAdd,N)}}(),x.b("utils.setDomNodeChildrenFromArrayMapping",x.a.cc),x.ba=function(){this.allowTemplateRewriting=!1},x.ba.prototype=new x.ca,x.ba.prototype.constructor=x.ba,x.ba.prototype.renderTemplateSource=function(t,e,n,i){return(e=9>x.a.W||!t.nodes?null:t.nodes())?x.a.la(e.cloneNode(!0).childNodes):(t=t.text(),x.a.ta(t,i))},x.ba.Na=new x.ba,x.ec(x.ba.Na),x.b("nativeTemplateEngine",x.ba),function(){x.Za=function(){var t=this.Gd=function(){if(!f||!f.tmpl)return 0;try{if(0<=f.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(t){}return 1}();this.renderTemplateSource=function(e,n,i,o){if(o=o||u,i=i||{},2>t)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var r=e.data("precompiled");return r||(r=e.text()||"",r=f.template(null,"{{ko_with $item.koBindingContext}}"+r+"{{/ko_with}}"),e.data("precompiled",r)),e=[n.$data],n=f.extend({koBindingContext:n},i.templateOptions),(n=f.tmpl(r,e,n)).appendTo(o.createElement("div")),f.fragments={},n},this.createJavaScriptEvaluatorBlock=function(t){return"{{ko_code ((function() { return "+t+" })()) }}"},this.addTemplate=function(t,e){u.write("<script type='text/html' id='"+t+"'>"+e+"<\/script>")},0<t&&(f.tmpl.tag.ko_code={open:"__.push($1 || '');"},f.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},x.Za.prototype=new x.ca,x.Za.prototype.constructor=x.Za;var t=new x.Za;0<t.Gd&&x.ec(t),x.b("jqueryTmplTemplateEngine",x.Za)}()})}()}).call(this,n(0))},function(t,e){t.exports="<div data-bind=\"style: { color: colors()[numberOfClicks()%4] }\">\n     Counter: <span data-bind='text: numberOfClicks'>&nbsp;</span> times\n   <button data-bind='click: countClick'>Click me</button>\n   <button data-bind='click: resetClicks'>Reset clicks</button>\n</div>"},function(t,e){t.exports='<form data-bind="submit:addItem">\n    Add item: <input type="text" data-bind=\'value:itemToAdd, valueUpdate: "afterkeydown"\' />\n    <button type="submit" data-bind="enable: itemToAdd().length > 0">Add</button>\n</form>\n \n<p>Your values:</p>\n<select multiple="multiple" height="5" data-bind="options:allItems, selectedOptions:selectedItems"> </select>\n \n<div>\n    <button data-bind="click: removeSelected, enable: selectedItems().length > 0">Remove</button>\n    <button data-bind="click: sortItems, enable: allItems().length > 1">Sort</button>\n</div>'},function(t,e,n){"use strict";n.r(e),function(t){n(5);var e=n(1),i=n.n(e);n(18),n(19);window.$=n(0),i.a.applyBindings({})}.call(this,n(0))},function(t,e,n){n(6),n(7),n(8),n(9),n(10),n(11),n(12),n(13),n(14),n(15),n(16),n(17)},function(t,e,n){(function(t){!function(t){"use strict";t.fn.emulateTransitionEnd=function(e){var n=!1,i=this;t(this).one("bsTransitionEnd",function(){n=!0});return setTimeout(function(){n||t(i).trigger(t.support.transition.end)},e),this},t(function(){t.support.transition=function(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";var e='[data-dismiss="alert"]',n=function(n){t(n).on("click",e,this.close)};n.VERSION="3.4.1",n.TRANSITION_DURATION=150,n.prototype.close=function(e){var i=t(this),o=i.attr("data-target");o||(o=(o=i.attr("href"))&&o.replace(/.*(?=#[^\s]*$)/,"")),o="#"===o?[]:o;var r=t(document).find(o);function a(){r.detach().trigger("closed.bs.alert").remove()}e&&e.preventDefault(),r.length||(r=i.closest(".alert")),r.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(r.removeClass("in"),t.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",a).emulateTransitionEnd(n.TRANSITION_DURATION):a())};var i=t.fn.alert;t.fn.alert=function(e){return this.each(function(){var i=t(this),o=i.data("bs.alert");o||i.data("bs.alert",o=new n(this)),"string"==typeof e&&o[e].call(i)})},t.fn.alert.Constructor=n,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.bs.alert.data-api",e,n.prototype.close)}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";var e=function(n,i){this.$element=t(n),this.options=t.extend({},e.DEFAULTS,i),this.isLoading=!1};function n(n){return this.each(function(){var i=t(this),o=i.data("bs.button"),r="object"==typeof n&&n;o||i.data("bs.button",o=new e(this,r)),"toggle"==n?o.toggle():n&&o.setState(n)})}e.VERSION="3.4.1",e.DEFAULTS={loadingText:"loading..."},e.prototype.setState=function(e){var n="disabled",i=this.$element,o=i.is("input")?"val":"html",r=i.data();e+="Text",null==r.resetText&&i.data("resetText",i[o]()),setTimeout(t.proxy(function(){i[o](null==r[e]?this.options[e]:r[e]),"loadingText"==e?(this.isLoading=!0,i.addClass(n).attr(n,n).prop(n,!0)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n).prop(n,!1))},this),0)},e.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var i=t.fn.button;t.fn.button=n,t.fn.button.Constructor=e,t.fn.button.noConflict=function(){return t.fn.button=i,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(e){var i=t(e.target).closest(".btn");n.call(i,"toggle"),t(e.target).is('input[type="radio"], input[type="checkbox"]')||(e.preventDefault(),i.is("input,button")?i.trigger("focus"):i.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";var e=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};function n(n){return this.each(function(){var i=t(this),o=i.data("bs.carousel"),r=t.extend({},e.DEFAULTS,i.data(),"object"==typeof n&&n),a="string"==typeof n?n:r.slide;o||i.data("bs.carousel",o=new e(this,r)),"number"==typeof n?o.to(n):a?o[a]():r.interval&&o.pause().cycle()})}e.VERSION="3.4.1",e.TRANSITION_DURATION=600,e.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},e.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},e.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},e.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},e.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e);if(("prev"==t&&0===n||"next"==t&&n==this.$items.length-1)&&!this.options.wrap)return e;var i=(n+("prev"==t?-1:1))%this.$items.length;return this.$items.eq(i)},e.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},e.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},e.prototype.next=function(){if(!this.sliding)return this.slide("next")},e.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},e.prototype.slide=function(n,i){var o=this.$element.find(".item.active"),r=i||this.getItemForDirection(n,o),a=this.interval,s="next"==n?"left":"right",l=this;if(r.hasClass("active"))return this.sliding=!1;var u=r[0],c=t.Event("slide.bs.carousel",{relatedTarget:u,direction:s});if(this.$element.trigger(c),!c.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(r)]);f&&f.addClass("active")}var d=t.Event("slid.bs.carousel",{relatedTarget:u,direction:s});return t.support.transition&&this.$element.hasClass("slide")?(r.addClass(n),"object"==typeof r&&r.length&&r[0].offsetWidth,o.addClass(s),r.addClass(s),o.one("bsTransitionEnd",function(){r.removeClass([n,s].join(" ")).addClass("active"),o.removeClass(["active",s].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(d)},0)}).emulateTransitionEnd(e.TRANSITION_DURATION)):(o.removeClass("active"),r.addClass("active"),this.sliding=!1,this.$element.trigger(d)),a&&this.cycle(),this}};var i=t.fn.carousel;t.fn.carousel=n,t.fn.carousel.Constructor=e,t.fn.carousel.noConflict=function(){return t.fn.carousel=i,this};var o=function(e){var i=t(this),o=i.attr("href");o&&(o=o.replace(/.*(?=#[^\s]+$)/,""));var r=i.attr("data-target")||o,a=t(document).find(r);if(a.hasClass("carousel")){var s=t.extend({},a.data(),i.data()),l=i.attr("data-slide-to");l&&(s.interval=!1),n.call(a,s),l&&a.data("bs.carousel").to(l),e.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",o).on("click.bs.carousel.data-api","[data-slide-to]",o),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var e=t(this);n.call(e,e.data())})})}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";var e=function(n,i){this.$element=t(n),this.options=t.extend({},e.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+n.id+'"],[data-toggle="collapse"][data-target="#'+n.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};function n(e){var n,i=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(document).find(i)}function i(n){return this.each(function(){var i=t(this),o=i.data("bs.collapse"),r=t.extend({},e.DEFAULTS,i.data(),"object"==typeof n&&n);!o&&r.toggle&&/show|hide/.test(n)&&(r.toggle=!1),o||i.data("bs.collapse",o=new e(this,r)),"string"==typeof n&&o[n]()})}e.VERSION="3.4.1",e.TRANSITION_DURATION=350,e.DEFAULTS={toggle:!0},e.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},e.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var n,o=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(o&&o.length&&(n=o.data("bs.collapse"))&&n.transitioning)){var r=t.Event("show.bs.collapse");if(this.$element.trigger(r),!r.isDefaultPrevented()){o&&o.length&&(i.call(o,"hide"),n||o.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var s=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return s.call(this);var l=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(s,this)).emulateTransitionEnd(e.TRANSITION_DURATION)[a](this.$element[0][l])}}}},e.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var n=t.Event("hide.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var o=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return o.call(this);this.$element[i](0).one("bsTransitionEnd",t.proxy(o,this)).emulateTransitionEnd(e.TRANSITION_DURATION)}}},e.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},e.prototype.getParent=function(){return t(document).find(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(e,i){var o=t(i);this.addAriaAndCollapsedClass(n(o),o)},this)).end()},e.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var o=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=e,t.fn.collapse.noConflict=function(){return t.fn.collapse=o,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(e){var o=t(this);o.attr("data-target")||e.preventDefault();var r=n(o),a=r.data("bs.collapse")?"toggle":o.data();i.call(r,a)})}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";var e=".dropdown-backdrop",n='[data-toggle="dropdown"]',i=function(e){t(e).on("click.bs.dropdown",this.toggle)};function o(e){var n=e.attr("data-target");n||(n=(n=e.attr("href"))&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i="#"!==n?t(document).find(n):null;return i&&i.length?i:e.parent()}function r(i){i&&3===i.which||(t(e).remove(),t(n).each(function(){var e=t(this),n=o(e),r={relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target)||(n.trigger(i=t.Event("hide.bs.dropdown",r)),i.isDefaultPrevented()||(e.attr("aria-expanded","false"),n.removeClass("open").trigger(t.Event("hidden.bs.dropdown",r)))))}))}i.VERSION="3.4.1",i.prototype.toggle=function(e){var n=t(this);if(!n.is(".disabled, :disabled")){var i=o(n),a=i.hasClass("open");if(r(),!a){"ontouchstart"in document.documentElement&&!i.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",r);var s={relatedTarget:this};if(i.trigger(e=t.Event("show.bs.dropdown",s)),e.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),i.toggleClass("open").trigger(t.Event("shown.bs.dropdown",s))}return!1}},i.prototype.keydown=function(e){if(/(38|40|27|32)/.test(e.which)&&!/input|textarea/i.test(e.target.tagName)){var i=t(this);if(e.preventDefault(),e.stopPropagation(),!i.is(".disabled, :disabled")){var r=o(i),a=r.hasClass("open");if(!a&&27!=e.which||a&&27==e.which)return 27==e.which&&r.find(n).trigger("focus"),i.trigger("click");var s=r.find(".dropdown-menu li:not(.disabled):visible a");if(s.length){var l=s.index(e.target);38==e.which&&l>0&&l--,40==e.which&&l<s.length-1&&l++,~l||(l=0),s.eq(l).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=function(e){return this.each(function(){var n=t(this),o=n.data("bs.dropdown");o||n.data("bs.dropdown",o=new i(this)),"string"==typeof e&&o[e].call(n)})},t.fn.dropdown.Constructor=i,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",r).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",n,i.prototype.toggle).on("keydown.bs.dropdown.data-api",n,i.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",i.prototype.keydown)}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";var e=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.fixedContent=".navbar-fixed-top, .navbar-fixed-bottom",this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};function n(n,i){return this.each(function(){var o=t(this),r=o.data("bs.modal"),a=t.extend({},e.DEFAULTS,o.data(),"object"==typeof n&&n);r||o.data("bs.modal",r=new e(this,a)),"string"==typeof n?r[n](i):a.show&&r.show(i)})}e.VERSION="3.4.1",e.TRANSITION_DURATION=300,e.BACKDROP_TRANSITION_DURATION=150,e.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},e.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},e.prototype.show=function(n){var i=this,o=t.Event("show.bs.modal",{relatedTarget:n});this.$element.trigger(o),this.isShown||o.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(i.$element)&&(i.ignoreBackdropClick=!0)})}),this.backdrop(function(){var o=t.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),o&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var r=t.Event("shown.bs.modal",{relatedTarget:n});o?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(r)}).emulateTransitionEnd(e.TRANSITION_DURATION):i.$element.trigger("focus").trigger(r)}))},e.prototype.hide=function(n){n&&n.preventDefault(),n=t.Event("hide.bs.modal"),this.$element.trigger(n),this.isShown&&!n.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(e.TRANSITION_DURATION):this.hideModal())},e.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},e.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},e.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},e.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},e.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},e.prototype.backdrop=function(n){var i=this,o=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=t.support.transition&&o;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+o).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){this.ignoreBackdropClick?this.ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),r&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!n)return;r?this.$backdrop.one("bsTransitionEnd",n).emulateTransitionEnd(e.BACKDROP_TRANSITION_DURATION):n()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){i.removeBackdrop(),n&&n()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(e.BACKDROP_TRANSITION_DURATION):a()}else n&&n()},e.prototype.handleUpdate=function(){this.adjustDialog()},e.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},e.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},e.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},e.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"";var n=this.scrollbarWidth;this.bodyIsOverflowing&&(this.$body.css("padding-right",e+n),t(this.fixedContent).each(function(e,i){var o=i.style.paddingRight,r=t(i).css("padding-right");t(i).data("padding-right",o).css("padding-right",parseFloat(r)+n+"px")}))},e.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad),t(this.fixedContent).each(function(e,n){var i=t(n).data("padding-right");t(n).removeData("padding-right"),n.style.paddingRight=i||""})},e.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var i=t.fn.modal;t.fn.modal=n,t.fn.modal.Constructor=e,t.fn.modal.noConflict=function(){return t.fn.modal=i,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(e){var i=t(this),o=i.attr("href"),r=i.attr("data-target")||o&&o.replace(/.*(?=#[^\s]+$)/,""),a=t(document).find(r),s=a.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(o)&&o},a.data(),i.data());i.is("a")&&e.preventDefault(),a.one("show.bs.modal",function(t){t.isDefaultPrevented()||a.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),n.call(a,s,this)})}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";var e=["sanitize","whiteList","sanitizeFn"],n=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],i={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},o=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:\/?#]*(?:[\/?#]|$))/gi,r=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;function a(e,i){var a=e.nodeName.toLowerCase();if(-1!==t.inArray(a,i))return-1===t.inArray(a,n)||Boolean(e.nodeValue.match(o)||e.nodeValue.match(r));for(var s=t(i).filter(function(t,e){return e instanceof RegExp}),l=0,u=s.length;l<u;l++)if(a.match(s[l]))return!0;return!1}function s(e,n,i){if(0===e.length)return e;if(i&&"function"==typeof i)return i(e);if(!document.implementation||!document.implementation.createHTMLDocument)return e;var o=document.implementation.createHTMLDocument("sanitization");o.body.innerHTML=e;for(var r=t.map(n,function(t,e){return e}),s=t(o.body).find("*"),l=0,u=s.length;l<u;l++){var c=s[l],f=c.nodeName.toLowerCase();if(-1!==t.inArray(f,r))for(var d=t.map(c.attributes,function(t){return t}),p=[].concat(n["*"]||[],n[f]||[]),h=0,g=d.length;h<g;h++)a(d[h],p)||c.removeAttribute(d[h].nodeName);else c.parentNode.removeChild(c)}return o.body.innerHTML}var l=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};l.VERSION="3.4.1",l.TRANSITION_DURATION=150,l.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0},sanitize:!0,sanitizeFn:null,whiteList:i},l.prototype.init=function(e,n,i){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&t(document).find(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var o=this.options.trigger.split(" "),r=o.length;r--;){var a=o[r];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var s="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},l.prototype.getDefaults=function(){return l.DEFAULTS},l.prototype.getOptions=function(n){var i=this.$element.data();for(var o in i)i.hasOwnProperty(o)&&-1!==t.inArray(o,e)&&delete i[o];return(n=t.extend({},this.getDefaults(),i,n)).delay&&"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),n.sanitize&&(n.template=s(n.template,n.whiteList,n.sanitizeFn)),n},l.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,i){n[t]!=i&&(e[t]=i)}),e},l.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState)n.hoverState="in";else{if(clearTimeout(n.timeout),n.hoverState="in",!n.options.delay||!n.options.delay.show)return n.show();n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)}},l.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},l.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),!n.isInStateTrue()){if(clearTimeout(n.timeout),n.hoverState="out",!n.options.delay||!n.options.delay.hide)return n.hide();n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)}},l.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var n=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!n)return;var i=this,o=this.tip(),r=this.getUID(this.type);this.setContent(),o.attr("id",r),this.$element.attr("aria-describedby",r),this.options.animation&&o.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,s=/\s?auto?\s?/i,u=s.test(a);u&&(a=a.replace(s,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?o.appendTo(t(document).find(this.options.container)):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var c=this.getPosition(),f=o[0].offsetWidth,d=o[0].offsetHeight;if(u){var p=a,h=this.getPosition(this.$viewport);a="bottom"==a&&c.bottom+d>h.bottom?"top":"top"==a&&c.top-d<h.top?"bottom":"right"==a&&c.right+f>h.width?"left":"left"==a&&c.left-f<h.left?"right":a,o.removeClass(p).addClass(a)}var g=this.getCalculatedOffset(a,c,f,d);this.applyPlacement(g,a);var m=function(){var t=i.hoverState;i.$element.trigger("shown.bs."+i.type),i.hoverState=null,"out"==t&&i.leave(i)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",m).emulateTransitionEnd(l.TRANSITION_DURATION):m()}},l.prototype.applyPlacement=function(e,n){var i=this.tip(),o=i[0].offsetWidth,r=i[0].offsetHeight,a=parseInt(i.css("margin-top"),10),s=parseInt(i.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(s)&&(s=0),e.top+=a,e.left+=s,t.offset.setOffset(i[0],t.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),i.addClass("in");var l=i[0].offsetWidth,u=i[0].offsetHeight;"top"==n&&u!=r&&(e.top=e.top+r-u);var c=this.getViewportAdjustedDelta(n,e,l,u);c.left?e.left+=c.left:e.top+=c.top;var f=/top|bottom/.test(n),d=f?2*c.left-o+l:2*c.top-r+u,p=f?"offsetWidth":"offsetHeight";i.offset(e),this.replaceArrow(d,i[0][p],f)},l.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},l.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();this.options.html?(this.options.sanitize&&(e=s(e,this.options.whiteList,this.options.sanitizeFn)),t.find(".tooltip-inner").html(e)):t.find(".tooltip-inner").text(e),t.removeClass("fade in top bottom left right")},l.prototype.hide=function(e){var n=this,i=t(this.$tip),o=t.Event("hide.bs."+this.type);function r(){"in"!=n.hoverState&&i.detach(),n.$element&&n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}if(this.$element.trigger(o),!o.isDefaultPrevented())return i.removeClass("in"),t.support.transition&&i.hasClass("fade")?i.one("bsTransitionEnd",r).emulateTransitionEnd(l.TRANSITION_DURATION):r(),this.hoverState=null,this},l.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},l.prototype.hasContent=function(){return this.getTitle()},l.prototype.getPosition=function(e){var n=(e=e||this.$element)[0],i="BODY"==n.tagName,o=n.getBoundingClientRect();null==o.width&&(o=t.extend({},o,{width:o.right-o.left,height:o.bottom-o.top}));var r=window.SVGElement&&n instanceof window.SVGElement,a=i?{top:0,left:0}:r?null:e.offset(),s={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},l=i?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},o,s,l,a)},l.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},l.prototype.getViewportAdjustedDelta=function(t,e,n,i){var o={top:0,left:0};if(!this.$viewport)return o;var r=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var s=e.top-r-a.scroll,l=e.top+r-a.scroll+i;s<a.top?o.top=a.top-s:l>a.top+a.height&&(o.top=a.top+a.height-l)}else{var u=e.left-r,c=e.left+r+n;u<a.left?o.left=a.left-u:c>a.right&&(o.left=a.left+a.width-c)}return o},l.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},l.prototype.getUID=function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},l.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},l.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},l.prototype.enable=function(){this.enabled=!0},l.prototype.disable=function(){this.enabled=!1},l.prototype.toggleEnabled=function(){this.enabled=!this.enabled},l.prototype.toggle=function(e){var n=this;e&&((n=t(e.currentTarget).data("bs."+this.type))||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},l.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})},l.prototype.sanitizeHtml=function(t){return s(t,this.options.whiteList,this.options.sanitizeFn)};var u=t.fn.tooltip;t.fn.tooltip=function(e){return this.each(function(){var n=t(this),i=n.data("bs.tooltip"),o="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||n.data("bs.tooltip",i=new l(this,o)),"string"==typeof e&&i[e]())})},t.fn.tooltip.Constructor=l,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=u,this}}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";var e=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");e.VERSION="3.4.1",e.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),e.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),e.prototype.constructor=e,e.prototype.getDefaults=function(){return e.DEFAULTS},e.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();if(this.options.html){var i=typeof n;this.options.sanitize&&(e=this.sanitizeHtml(e),"string"===i&&(n=this.sanitizeHtml(n))),t.find(".popover-title").html(e),t.find(".popover-content").children().detach().end()["string"===i?"html":"append"](n)}else t.find(".popover-title").text(e),t.find(".popover-content").children().detach().end().text(n);t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},e.prototype.hasContent=function(){return this.getTitle()||this.getContent()},e.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},e.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var n=t.fn.popover;t.fn.popover=function(n){return this.each(function(){var i=t(this),o=i.data("bs.popover"),r="object"==typeof n&&n;!o&&/destroy|hide/.test(n)||(o||i.data("bs.popover",o=new e(this,r)),"string"==typeof n&&o[n]())})},t.fn.popover.Constructor=e,t.fn.popover.noConflict=function(){return t.fn.popover=n,this}}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";function e(n,i){this.$body=t(document.body),this.$scrollElement=t(n).is(document.body)?t(window):t(n),this.options=t.extend({},e.DEFAULTS,i),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var i=t(this),o=i.data("bs.scrollspy"),r="object"==typeof n&&n;o||i.data("bs.scrollspy",o=new e(this,r)),"string"==typeof n&&o[n]()})}e.VERSION="3.4.1",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",i=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",i=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),o=e.data("target")||e.attr("href"),r=/^#./.test(o)&&t(o);return r&&r.length&&r.is(":visible")&&[[r[n]().top+i,o]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),o=this.offsets,r=this.targets,a=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=i)return a!=(t=r[r.length-1])&&this.activate(t);if(a&&e<o[0])return this.activeTarget=null,this.clear();for(t=o.length;t--;)a!=r[t]&&e>=o[t]&&(void 0===o[t+1]||e<o[t+1])&&this.activate(r[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',i=t(n).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var i=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=i,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";var e=function(e){this.element=t(e)};function n(n){return this.each(function(){var i=t(this),o=i.data("bs.tab");o||i.data("bs.tab",o=new e(this)),"string"==typeof n&&o[n]()})}e.VERSION="3.4.1",e.TRANSITION_DURATION=150,e.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),i=e.data("target");if(i||(i=(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var o=n.find(".active:last a"),r=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:o[0]});if(o.trigger(r),e.trigger(a),!a.isDefaultPrevented()&&!r.isDefaultPrevented()){var s=t(document).find(i);this.activate(e.closest("li"),n),this.activate(s,s.parent(),function(){o.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:o[0]})})}}},e.prototype.activate=function(n,i,o){var r=i.find("> .active"),a=o&&t.support.transition&&(r.length&&r.hasClass("fade")||!!i.find("> .fade").length);function s(){r.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),n.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),a?(n[0].offsetWidth,n.addClass("in")):n.removeClass("fade"),n.parent(".dropdown-menu").length&&n.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),o&&o()}r.length&&a?r.one("bsTransitionEnd",s).emulateTransitionEnd(e.TRANSITION_DURATION):s(),r.removeClass("in")};var i=t.fn.tab;t.fn.tab=n,t.fn.tab.Constructor=e,t.fn.tab.noConflict=function(){return t.fn.tab=i,this};var o=function(e){e.preventDefault(),n.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',o).on("click.bs.tab.data-api",'[data-toggle="pill"]',o)}(t)}).call(this,n(0))},function(t,e,n){(function(t){!function(t){"use strict";var e=function(n,i){this.options=t.extend({},e.DEFAULTS,i);var o=this.options.target===e.DEFAULTS.target?t(this.options.target):t(document).find(this.options.target);this.$target=o.on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(n),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};function n(n){return this.each(function(){var i=t(this),o=i.data("bs.affix"),r="object"==typeof n&&n;o||i.data("bs.affix",o=new e(this,r)),"string"==typeof n&&o[n]()})}e.VERSION="3.4.1",e.RESET="affix affix-top affix-bottom",e.DEFAULTS={offset:0,target:window},e.prototype.getState=function(t,e,n,i){var o=this.$target.scrollTop(),r=this.$element.offset(),a=this.$target.height();if(null!=n&&"top"==this.affixed)return o<n&&"top";if("bottom"==this.affixed)return null!=n?!(o+this.unpin<=r.top)&&"bottom":!(o+a<=t-i)&&"bottom";var s=null==this.affixed,l=s?o:r.top;return null!=n&&o<=n?"top":null!=i&&l+(s?a:e)>=t-i&&"bottom"},e.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(e.RESET).addClass("affix");var t=this.$target.scrollTop(),n=this.$element.offset();return this.pinnedOffset=n.top-t},e.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},e.prototype.checkPosition=function(){if(this.$element.is(":visible")){var n=this.$element.height(),i=this.options.offset,o=i.top,r=i.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof i&&(r=o=i),"function"==typeof o&&(o=i.top(this.$element)),"function"==typeof r&&(r=i.bottom(this.$element));var s=this.getState(a,n,o,r);if(this.affixed!=s){null!=this.unpin&&this.$element.css("top","");var l="affix"+(s?"-"+s:""),u=t.Event(l+".bs.affix");if(this.$element.trigger(u),u.isDefaultPrevented())return;this.affixed=s,this.unpin="bottom"==s?this.getPinnedOffset():null,this.$element.removeClass(e.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==s&&this.$element.offset({top:a-n-r})}};var i=t.fn.affix;t.fn.affix=n,t.fn.affix.Constructor=e,t.fn.affix.noConflict=function(){return t.fn.affix=i,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var e=t(this),i=e.data();i.offset=i.offset||{},null!=i.offsetBottom&&(i.offset.bottom=i.offsetBottom),null!=i.offsetTop&&(i.offset.top=i.offsetTop),n.call(e,i)})})}(t)}).call(this,n(0))},function(t,e,n){"use strict";var i=n(1),o=n.n(i);var r=n(2),a=n.n(r);o.a.components.register("leanux-clickcounter",{viewModel:class{constructor(){this.numberOfClicks=o.a.observable(0),this.colors=o.a.observableArray(["red","green","blue","black"]),this.countClick=function(){this.numberOfClicks(this.numberOfClicks()+1)},this.resetClicks=function(){this.numberOfClicks(0)}}},template:a.a})},function(t,e,n){"use strict";var i=n(1),o=n.n(i);var r=n(3),a=n.n(r);o.a.components.register("leanux-form",{viewModel:class{constructor(){this.itemToAdd=o.a.observable(""),this.allItems=o.a.observableArray(["Fries","Eggs Benedict","Ham","Cheese"]),this.selectedItems=o.a.observableArray(["Ham"]),this.addItem=function(){""!=this.itemToAdd()&&this.allItems.indexOf(this.itemToAdd())<0&&this.allItems.push(this.itemToAdd()),this.itemToAdd("")},this.removeSelected=function(){this.allItems.removeAll(this.selectedItems()),this.selectedItems([])},this.sortItems=function(){this.allItems.sort()}}},template:a.a})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,